{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"edgeql-queries Simple EdgeQL in Python. Introduction \u00b6 edgeql-queries is a library that allows you to store your EdgeQL queries in separate files and then execute them like normal Python functions. This way you can control versions of the queries code, as with any other languages, but use it in Python applications. Information This library may become less useful after the release of the [query builder](https://edgedb.com/roadmap#client-language-bindings for EdgeDB, but who knows \u00af\\_(\u30c4)_/\u00af . Requirements \u00b6 edgeql-queries requires only the EdgeDB driver for Python . Installation \u00b6 You can install edgeql-queries using pip : pip install edgeql-queries Or if you are using poetry : poetry install edgeql-queries Example \u00b6 There is a more complex example based on the EdgeDB tutorial in the example folder in the repository. You can look there to see more features. Here is a simplified version: Let's assume that we have the following schema in our already configured database: module default { type Person { required property first_name -> str ; required property last_name -> str ; } } We'll write our queries in the queries.edgeql : # name: select-users-by-last-name # Select all users that have same last name. SELECT Person { first_name, } FILTER .last_name = < str > $last_name # name: select-user-by-id! # Select single user's last name by it's id. SELECT Person { last_name } FILTER .id = < uuid > $user_id # name: create-keanu-reeves* # Create new user. INSERT Person { first_name := \"Keanu\" , last_name := \"Reeves\" , } Finally, we'll write our Python code: import edgedb import edgeql_queries queries = edgeql_queries . from_path ( \"./queries.edgeql\" , async_driver = False ) conn = edgedb . connect () # create Keanu queries . create_keanu_reeves ( conn ) # query all Keanu from database keanu_set = queries . select_users_by_last_name ( conn , last_name = \"Reeves\" ) for keanu in keanu_set : keanu_from_db = queries . select_user_by_id ( conn , user_id = keanu . id ) print ( f \" { keanu . first_name } { keanu_from_db . last_name } : { keanu_from_db . id } \" ) Credits \u00b6 This project is inspired by aiosql project and is based on it's source code. License \u00b6 This project is licensed under the terms of the FreeBSD license.","title":"Introduction"},{"location":"#introduction","text":"edgeql-queries is a library that allows you to store your EdgeQL queries in separate files and then execute them like normal Python functions. This way you can control versions of the queries code, as with any other languages, but use it in Python applications. Information This library may become less useful after the release of the [query builder](https://edgedb.com/roadmap#client-language-bindings for EdgeDB, but who knows \u00af\\_(\u30c4)_/\u00af .","title":"Introduction"},{"location":"#requirements","text":"edgeql-queries requires only the EdgeDB driver for Python .","title":"Requirements"},{"location":"#installation","text":"You can install edgeql-queries using pip : pip install edgeql-queries Or if you are using poetry : poetry install edgeql-queries","title":"Installation"},{"location":"#example","text":"There is a more complex example based on the EdgeDB tutorial in the example folder in the repository. You can look there to see more features. Here is a simplified version: Let's assume that we have the following schema in our already configured database: module default { type Person { required property first_name -> str ; required property last_name -> str ; } } We'll write our queries in the queries.edgeql : # name: select-users-by-last-name # Select all users that have same last name. SELECT Person { first_name, } FILTER .last_name = < str > $last_name # name: select-user-by-id! # Select single user's last name by it's id. SELECT Person { last_name } FILTER .id = < uuid > $user_id # name: create-keanu-reeves* # Create new user. INSERT Person { first_name := \"Keanu\" , last_name := \"Reeves\" , } Finally, we'll write our Python code: import edgedb import edgeql_queries queries = edgeql_queries . from_path ( \"./queries.edgeql\" , async_driver = False ) conn = edgedb . connect () # create Keanu queries . create_keanu_reeves ( conn ) # query all Keanu from database keanu_set = queries . select_users_by_last_name ( conn , last_name = \"Reeves\" ) for keanu in keanu_set : keanu_from_db = queries . select_user_by_id ( conn , user_id = keanu . id ) print ( f \" { keanu . first_name } { keanu_from_db . last_name } : { keanu_from_db . id } \" )","title":"Example"},{"location":"#credits","text":"This project is inspired by aiosql project and is based on it's source code.","title":"Credits"},{"location":"#license","text":"This project is licensed under the terms of the FreeBSD license.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] \u00b6 Compare with 0.3.0 [0.3.0] - 2022-03-02 \u00b6 Compare with 0.2.0 Added \u00b6 Add support for JSON output via .json property for Queries . Misc \u00b6 Bump dependencies. [0.2.0] - 2022-02-10 \u00b6 Compare with 0.1.0 Added \u00b6 Add support for Python 3.10 . Add support for EdgeDB 1.0 . Add new operation type + that is used for .query_single method instead. Changed \u00b6 Pin edgedb 0.19.0 as minimal required version. ! operation is now used for .query_required_single method. Use new .query_single / .query_required_single method instead of .query_one . Misc \u00b6 Bump dependencies. Update EdgeQL lexer from latest master commit. Move EdgeQL queries files used in tests into dbschema directory created by edgedb project . Update tests and documentation to get rid of EdgeDB 's DNS. Update documentation. Use edgedb/setup-edgedb action to install EdgeDB CLI and run EdgeDB instance for tests. Use snok/install-poetry@v1 to install Poetry . Add Python 3.10 in CI's matrix when running tests. Run CI using latest EdgeDB 1.0 version. [0.1.0] - 2021-05-17 \u00b6 Compare with 0.0.5 Added \u00b6 Add support for Python 3.9 . Support transactions as arguments in queries. Misc \u00b6 Bump dependencies. Add cache for dependencies in CI. Add Python 3.9 in CI's matrix when running tests. Run CI using latest EdgeDB Beta 2 version. Update CI using latest stable actions. Migrate to GitHub-native Dependantbot. Replace docker-compose with edgedb projects . Move pytest , coverage , mypy and isort configuration into pyproject.toml . Run flake8 on tests with flake8-pytest-style and fix issues. [0.0.5] - 2020-09-02 \u00b6 Compare with 0.0.4 Changed \u00b6 Pin edgedb-python version on >= 0.9.0 . Misc \u00b6 Run CI on EdgeDB Alpha 5 . [0.0.4] - 2020-08-22 \u00b6 Compare with 0.0.3 Changed \u00b6 Change queries parsing allowing arbitrary comments in queries. [0.0.3] - 2020-08-14 \u00b6 Compare with 0.0.2 Added \u00b6 Support aiosql via custom adapter. Changed \u00b6 Change the license from MIT to FreeBSD as in the parent projects( aiosql and anosql ). Misc \u00b6 Update netlify-action to update existing message with docs deployment instead of spaming with new one. [0.0.2] - 2020-08-11 \u00b6 Compare with 0.0.1 Added \u00b6 Support positional arguments in queries. Include py.typed file for providing types information for type checkers. Support running queries through pools. Changed \u00b6 Pin edgedb-python on ^0.9.0 . Fixed \u00b6 Fix typos and examples in docs. Misc \u00b6 Move to nox from scripts. Run CI on EdgeDB alpha 4 . [0.0.1] - 2020-04-09 \u00b6 Compare with first commit Added \u00b6 First release.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"Compare with 0.3.0","title":"[Unreleased]"},{"location":"changelog/#030-2022-03-02","text":"Compare with 0.2.0","title":"[0.3.0] - 2022-03-02"},{"location":"changelog/#added","text":"Add support for JSON output via .json property for Queries .","title":"Added"},{"location":"changelog/#misc","text":"Bump dependencies.","title":"Misc"},{"location":"changelog/#020-2022-02-10","text":"Compare with 0.1.0","title":"[0.2.0] - 2022-02-10"},{"location":"changelog/#added_1","text":"Add support for Python 3.10 . Add support for EdgeDB 1.0 . Add new operation type + that is used for .query_single method instead.","title":"Added"},{"location":"changelog/#changed","text":"Pin edgedb 0.19.0 as minimal required version. ! operation is now used for .query_required_single method. Use new .query_single / .query_required_single method instead of .query_one .","title":"Changed"},{"location":"changelog/#misc_1","text":"Bump dependencies. Update EdgeQL lexer from latest master commit. Move EdgeQL queries files used in tests into dbschema directory created by edgedb project . Update tests and documentation to get rid of EdgeDB 's DNS. Update documentation. Use edgedb/setup-edgedb action to install EdgeDB CLI and run EdgeDB instance for tests. Use snok/install-poetry@v1 to install Poetry . Add Python 3.10 in CI's matrix when running tests. Run CI using latest EdgeDB 1.0 version.","title":"Misc"},{"location":"changelog/#010-2021-05-17","text":"Compare with 0.0.5","title":"[0.1.0] - 2021-05-17"},{"location":"changelog/#added_2","text":"Add support for Python 3.9 . Support transactions as arguments in queries.","title":"Added"},{"location":"changelog/#misc_2","text":"Bump dependencies. Add cache for dependencies in CI. Add Python 3.9 in CI's matrix when running tests. Run CI using latest EdgeDB Beta 2 version. Update CI using latest stable actions. Migrate to GitHub-native Dependantbot. Replace docker-compose with edgedb projects . Move pytest , coverage , mypy and isort configuration into pyproject.toml . Run flake8 on tests with flake8-pytest-style and fix issues.","title":"Misc"},{"location":"changelog/#005-2020-09-02","text":"Compare with 0.0.4","title":"[0.0.5] - 2020-09-02"},{"location":"changelog/#changed_1","text":"Pin edgedb-python version on >= 0.9.0 .","title":"Changed"},{"location":"changelog/#misc_3","text":"Run CI on EdgeDB Alpha 5 .","title":"Misc"},{"location":"changelog/#004-2020-08-22","text":"Compare with 0.0.3","title":"[0.0.4] - 2020-08-22"},{"location":"changelog/#changed_2","text":"Change queries parsing allowing arbitrary comments in queries.","title":"Changed"},{"location":"changelog/#003-2020-08-14","text":"Compare with 0.0.2","title":"[0.0.3] - 2020-08-14"},{"location":"changelog/#added_3","text":"Support aiosql via custom adapter.","title":"Added"},{"location":"changelog/#changed_3","text":"Change the license from MIT to FreeBSD as in the parent projects( aiosql and anosql ).","title":"Changed"},{"location":"changelog/#misc_4","text":"Update netlify-action to update existing message with docs deployment instead of spaming with new one.","title":"Misc"},{"location":"changelog/#002-2020-08-11","text":"Compare with 0.0.1","title":"[0.0.2] - 2020-08-11"},{"location":"changelog/#added_4","text":"Support positional arguments in queries. Include py.typed file for providing types information for type checkers. Support running queries through pools.","title":"Added"},{"location":"changelog/#changed_4","text":"Pin edgedb-python on ^0.9.0 .","title":"Changed"},{"location":"changelog/#fixed","text":"Fix typos and examples in docs.","title":"Fixed"},{"location":"changelog/#misc_5","text":"Move to nox from scripts. Run CI on EdgeDB alpha 4 .","title":"Misc"},{"location":"changelog/#001-2020-04-09","text":"Compare with first commit","title":"[0.0.1] - 2020-04-09"},{"location":"changelog/#added_5","text":"First release.","title":"Added"},{"location":"grouping-queries/","text":"If you pass a single file or directory without nesting in the from_path function, then your EdgeQL queries will be placed directly in the returned queries as attributes. For example, if there is a single file with queries named queries.edgeql : # name: create-new-person! # Create new person with passing first and lst names. INSERT Person { first_name := < str > $first_name , last_name := < str > $last_name , } # name: select-movies-by-year # Get movies by release year. SELECT Movie { title, year, director: { last_name, }, actors: { first_name, last_name, } } FILTER .year = < int64 > $year or a directory named edgeql with 2 edgeql/persons.edgeql and edgeql/movies.edgeql files: edgeql/persons.edgeql : # name: create-new-person! # Create new person with passing first and lst names. INSERT Person { first_name := < str > $first_name , last_name := < str > $last_name , } edgeql/movies.edgeql # name: select-movies-by-year # Get movies by release year. SELECT Movie { title, year, director: { last_name, }, actors: { first_name, last_name, } } FILTER .year = < int64 > $year Then working python code will look like this: import edgedb import edgeql_queries # or edgeql_queries.from_path('./edgeql', async_driver=False) for directory queries = edgeql_queries . from_path ( \"./queries.edgeql\" , async_driver = False ) conn = edgedb . connect () queries . create_new_person ( conn , first_name = \"Keanu\" , last_name = \"Reeves\" ) But if you pass a directory with subdirectories that contain .edgeql files, then these queries will be placed as subqueries in the returned queries. For example, if there is the following directory tree: edgeql/ \u251c\u2500\u2500 persons \u2502 \u2514\u2500\u2500 persons.edgeql \u2514\u2500\u2500 movies \u2514\u2500\u2500 movies.edgeql Then edgeql-queries will generate 2 subgroups for the returned queries, and the working code will look like this: import edgedb import edgeql_queries queries = edgeql_queries . from_path ( \"./edgeql\" , async_driver = False ) conn = edgedb . connect () movies = queries . movies . select_movies_by_year ( conn , year = 2020 ) print ( movies )","title":"Grouping Queries"},{"location":"improve-typing/","text":"Since Queries are dynamically generated at runtime, they cannot provide type hints for your editors/IDEs or linters. But you can write typings for your queries yourself. queries.edgeql : # name: select-users-by-last-name # Select all users that have same last name. SELECT Person { first_name, last_name, } FILTER .last_name = < str > $last_name # name: select-user-by-id! # Select single user's last name by it's id. SELECT Person { first_name, last_name } FILTER .id = < uuid > $user_id # name: create-keanu-reeves* # Create new user. INSERT Person { first_name := \"Keanu\" , last_name := \"Reeves\" , } And python code: from typing import Protocol , Set , Union , cast from uuid import UUID import edgedb import edgeql_queries class Person ( Protocol ): id : UUID first_name : str last_name : str class Queries : async def select_users_by_last_name ( self , executor : edgedb . AsyncIOExecutor , last_name : str , ) -> Set [ Person ]: ... async def select_user_by_id ( self , executor : edgedb . AsyncIOExecutor , user_id : UUID , ) -> Person : ... async def create_keanu_reeves ( self , executor : edgedb . AsyncIOExecutor ) -> None : ... queries = cast ( Queries , edgeql_queries . from_path ( \"./queries.edgeql\" ))","title":"Improve Typing Of Queries"},{"location":"contrib/aiosql/","text":"edgeql-queries provides an adapter for aiosql . Using it is quite simple and with its help, you can use aiosql and edgeql-queries together, while still being able to replace it with another adapter. You can use, for example, PostgreSQL with EdgeDB, since EdgeDB is based on PostgreSQL and it is possible that in the future, access to the PostgreSQL server that is used by EdgeDB will be open. queries.edgeql : # name: select-movie-by-id! # Get movie by id. SELECT Movie { title, year, director: { user_id, }, } FILTER .id = < uuid > $0 LIMIT 1 ; queries.sql : -- name: get-username-by-id^ -- Get username by user's ID. SELECT username FROM users WHERE id = : id ; And python code: import asyncio from uuid import UUID import aiosql import asyncpg import edgedb from edgeql_queries.contrib import aiosql as eq_aiosql MOVIE_ID = UUID ( \"6000323c-cc31-474d-828b-dadaa6404674\" ) pg_queries = aiosql . from_path ( \"./aiosql_contrib.sql\" , \"asyncpg\" ) edb_queries = aiosql . from_path ( \"./aiosql_contrib.edgeql\" , driver_adapter = eq_aiosql . EdgeQLAsyncAdapter , loader_cls = eq_aiosql . EdgeQLQueryLoader , queries_cls = eq_aiosql . EdgeQLQueries , ) async def main (): edb_conn = await edgedb . async_connect () pg_conn = await asyncpg . connect ( \"postgres://postgres@localhost/postgres\" ) movie = await edb_queries . select_movie_by_id ( edb_conn , MOVIE_ID ) user_record = await pg_queries . get_username_by_id ( pg_conn , id = movie . director . user_id , ) print ( f \"Director's name: { user_record [ 0 ] } \" ) asyncio . run ( main ())","title":"aiosql"},{"location":"queries-definition/queries-definition-intro/","text":"An EdgeQL query that can be parsed using edgeql-queries has some limitations: Query must be named. The query's name must not contain characters that cannot be used in Python identifiers ( except for the - character, since it will be converted to _ ). They can have special symbols after their names that will change how this queries will be executed: * : query will be executed as script with using .execute method from driver. + : query will return a single object or None and executed with .query_single method from driver. ! : query will always return a single object and executed with .query_required_single method from driver. empty: common query that will return a set of objects and will be executed with .query method from driver. Names \u00b6 The query name must be a valid Python identifier, but it can contain a - character, which will be converted to _ . An example of valid query names: Example 1: # name: get-persons-by-age SELECT Person { first_name } FILTER .age = < int64 > $age Example 2: # name: get-person-by-full-name! SELECT Person { first_name, last_name, age } FILTER .first_name = < str > $first_name AND .last_name = < str > $last_name Example 3: # name: create-test-users* FOR x IN { (name := 'Alice' , theme := 'fire' ), (name := 'Bob' , theme := 'rain' ), (name := 'Carol' , theme := 'clouds' ), (name := 'Dave' , theme := 'forest' ) } UNION ( INSERT User { name := x.name, theme := x.theme, } );","title":"Queries Definition"},{"location":"queries-definition/queries-definition-intro/#names","text":"The query name must be a valid Python identifier, but it can contain a - character, which will be converted to _ . An example of valid query names: Example 1: # name: get-persons-by-age SELECT Person { first_name } FILTER .age = < int64 > $age Example 2: # name: get-person-by-full-name! SELECT Person { first_name, last_name, age } FILTER .first_name = < str > $first_name AND .last_name = < str > $last_name Example 3: # name: create-test-users* FOR x IN { (name := 'Alice' , theme := 'fire' ), (name := 'Bob' , theme := 'rain' ), (name := 'Carol' , theme := 'clouds' ), (name := 'Dave' , theme := 'forest' ) } UNION ( INSERT User { name := x.name, theme := x.theme, } );","title":"Names"},{"location":"queries-definition/operation-types/execute/","text":"Just Execute Query With * : \u00b6 If you are not using the result of the query, you can mark it * . This will tell edgeql-queries to use the .execute driver method. This may be useful for migration, for example. Information This is only an example, because full migration support exists directly in the EdgeDB CLI. For example, there are the following migrations for our scheme: edgeql/migrations/migrtaion_0000_default.edgeql : # name: migration_0000_default* CREATE MIGRATION migration_0000_default TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } } }; COMMIT MIGRATION migration_0000_default; edgeql/migrations/migration_0001_add_movies.edgeql : # name: migration_0001_add_movies* CREATE MIGRATION migration_0001_add_movies TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } type Movie { required property title -> str ; # the year of release property year -> int64 ; required link director -> Person; multi link actors -> Person; } } }; COMMIT MIGRATION migration_0001_add_movies; edgeql/migrations/migration_0002_add_min_year_contraint.edgeql : # name: migration_0002_add_min_year_constraint* CREATE MIGRATION migration_0002_add_min_year_constraint TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } type Movie { required property title -> str ; # the year of release property year -> int64 { constraint min_value ( 1888 ); }; required link director -> Person; multi link actors -> Person; } } }; COMMIT MIGRATION migration_0002_add_min_year_constraint; We can migrate it using the following code: migrate.py : import edgedb from edgeql_queries import from_path queries = from_path ( \"./edgeql\" , async_driver = False ) conn = edgedb . connect () for migration_query in queries . migrations . available_queries : print ( f \"migrate: { migration_query . name } \" ) for tx in conn . transaction (): with tx : queries . migrations . get_executor ( migration_query . name )( tx )","title":"Execute Query"},{"location":"queries-definition/operation-types/execute/#just-execute-query-with","text":"If you are not using the result of the query, you can mark it * . This will tell edgeql-queries to use the .execute driver method. This may be useful for migration, for example. Information This is only an example, because full migration support exists directly in the EdgeDB CLI. For example, there are the following migrations for our scheme: edgeql/migrations/migrtaion_0000_default.edgeql : # name: migration_0000_default* CREATE MIGRATION migration_0000_default TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } } }; COMMIT MIGRATION migration_0000_default; edgeql/migrations/migration_0001_add_movies.edgeql : # name: migration_0001_add_movies* CREATE MIGRATION migration_0001_add_movies TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } type Movie { required property title -> str ; # the year of release property year -> int64 ; required link director -> Person; multi link actors -> Person; } } }; COMMIT MIGRATION migration_0001_add_movies; edgeql/migrations/migration_0002_add_min_year_contraint.edgeql : # name: migration_0002_add_min_year_constraint* CREATE MIGRATION migration_0002_add_min_year_constraint TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } type Movie { required property title -> str ; # the year of release property year -> int64 { constraint min_value ( 1888 ); }; required link director -> Person; multi link actors -> Person; } } }; COMMIT MIGRATION migration_0002_add_min_year_constraint; We can migrate it using the following code: migrate.py : import edgedb from edgeql_queries import from_path queries = from_path ( \"./edgeql\" , async_driver = False ) conn = edgedb . connect () for migration_query in queries . migrations . available_queries : print ( f \"migrate: { migration_query . name } \" ) for tx in conn . transaction (): with tx : queries . migrations . get_executor ( migration_query . name )( tx )","title":"Just Execute Query With *:"},{"location":"queries-definition/operation-types/select-required-single/","text":"Query Single Object With ! : \u00b6 If you know that your query will return a single object, you can put ! at the end of its name and then edgeql-queries will use the .query_required_single method from driver for this query. For example, here is the code that directly uses the python driver: import edgedb conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) user = conn . query_single ( \"\"\" SELECT Person { username } FILTER .ip = <str>$user_ip LIMIT 1 \"\"\" , user_ip = \"127.0.0.1\" , ) if user is None : print ( \"oops, no user was found\" ) else : print ( \"user:\" , user . username ) And this is the code that uses edgeql-queries : queries.edgeql : # name: select-person-by-ip! # Query user by IP. SELECT Person { username } FILTER .ip = < str > $user_ip LIMIT 1 And python code: import edgedb from edgeql_queries import from_path conn = edgedb . connect () queries = from_path ( \"./queries.edgeql\" , async_driver = False ) user = queries . select_person_by_ip ( conn , user_ip = \"127.0.0.1\" ) print ( \"user:\" , user . username )","title":"Query Requried Single Object"},{"location":"queries-definition/operation-types/select-required-single/#query-single-object-with","text":"If you know that your query will return a single object, you can put ! at the end of its name and then edgeql-queries will use the .query_required_single method from driver for this query. For example, here is the code that directly uses the python driver: import edgedb conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) user = conn . query_single ( \"\"\" SELECT Person { username } FILTER .ip = <str>$user_ip LIMIT 1 \"\"\" , user_ip = \"127.0.0.1\" , ) if user is None : print ( \"oops, no user was found\" ) else : print ( \"user:\" , user . username ) And this is the code that uses edgeql-queries : queries.edgeql : # name: select-person-by-ip! # Query user by IP. SELECT Person { username } FILTER .ip = < str > $user_ip LIMIT 1 And python code: import edgedb from edgeql_queries import from_path conn = edgedb . connect () queries = from_path ( \"./queries.edgeql\" , async_driver = False ) user = queries . select_person_by_ip ( conn , user_ip = \"127.0.0.1\" ) print ( \"user:\" , user . username )","title":"Query Single Object With !:"},{"location":"queries-definition/operation-types/select-set/","text":"If you just need to get the query results, do not write anything after the name. Such query will use .query from the driver: queries.edgeql : # name: select-all-users SELECT Person { first_name, last_name, age } And python code: import edgedb from edgeql_queries import from_path conn = edgedb . connect () queries = from_path ( \"./queries.edgeql\" , async_driver = False ) users = queries . select_all_users ( conn ) for user in users : print ( \"user:\" , user . first_name )","title":"Query Set Of Objects"},{"location":"queries-definition/operation-types/select-single/","text":"Query Single Object With + : \u00b6 If you know that your query can return either a single object or None , you can put + at the end of its name and then edgeql-queries will use the .query_single method from driver for this query. For example, here is the code that directly uses the python driver: import edgedb conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) user = conn . query_single ( \"\"\" SELECT Person { username } FILTER .ip = <str>$user_ip LIMIT 1 \"\"\" , user_ip = \"127.0.0.1\" , ) if user is None : print ( \"oops, no user was found\" ) else : print ( \"user:\" , user . username ) And this is the code that uses edgeql-queries : queries.edgeql : # name: select-person-by-ip+ # Query user by IP. SELECT Person { username } FILTER .ip = < str > $user_ip LIMIT 1 And python code: import edgedb from edgeql_queries import from_path conn = edgedb . connect () queries = from_path ( \"./queries.edgeql\" , async_driver = False ) user = queries . select_person_by_ip ( conn , user_ip = \"127.0.0.1\" ) if user is None : print ( \"oops, no user was found\" ) else : print ( \"user:\" , user . username )","title":"Query Single Object"},{"location":"queries-definition/operation-types/select-single/#query-single-object-with","text":"If you know that your query can return either a single object or None , you can put + at the end of its name and then edgeql-queries will use the .query_single method from driver for this query. For example, here is the code that directly uses the python driver: import edgedb conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) user = conn . query_single ( \"\"\" SELECT Person { username } FILTER .ip = <str>$user_ip LIMIT 1 \"\"\" , user_ip = \"127.0.0.1\" , ) if user is None : print ( \"oops, no user was found\" ) else : print ( \"user:\" , user . username ) And this is the code that uses edgeql-queries : queries.edgeql : # name: select-person-by-ip+ # Query user by IP. SELECT Person { username } FILTER .ip = < str > $user_ip LIMIT 1 And python code: import edgedb from edgeql_queries import from_path conn = edgedb . connect () queries = from_path ( \"./queries.edgeql\" , async_driver = False ) user = queries . select_person_by_ip ( conn , user_ip = \"127.0.0.1\" ) if user is None : print ( \"oops, no user was found\" ) else : print ( \"user:\" , user . username )","title":"Query Single Object With +:"},{"location":"reference/exceptions/","text":"Definition for error that may be raised by this library. EdgeQLLoadError ( Exception ) \u00b6 Error that raised if there is an error to load queries. Source code in edgeql_queries/exceptions.py class EdgeQLLoadError ( Exception ): \"\"\"Error that raised if there is an error to load queries.\"\"\" EdgeQLParsingError ( Exception ) \u00b6 Error that raised if there is an error in parsing query. Source code in edgeql_queries/exceptions.py class EdgeQLParsingError ( Exception ): \"\"\"Error that raised if there is an error in parsing query.\"\"\"","title":"Errors"},{"location":"reference/exceptions/#edgeql_queries.exceptions.EdgeQLLoadError","text":"Error that raised if there is an error to load queries. Source code in edgeql_queries/exceptions.py class EdgeQLLoadError ( Exception ): \"\"\"Error that raised if there is an error to load queries.\"\"\"","title":"EdgeQLLoadError"},{"location":"reference/exceptions/#edgeql_queries.exceptions.EdgeQLParsingError","text":"Error that raised if there is an error in parsing query. Source code in edgeql_queries/exceptions.py class EdgeQLParsingError ( Exception ): \"\"\"Error that raised if there is an error in parsing query.\"\"\"","title":"EdgeQLParsingError"},{"location":"reference/executors/","text":"Definition for query executors. async_executor \u00b6 Definition for creator of async executors. AsyncExecutor ( BaseExecutor ) \u00b6 Async executor for queries. Source code in edgeql_queries/executors/async_executor.py class AsyncExecutor ( BaseExecutor ): \"\"\"Async executor for queries.\"\"\" def __init__ ( self , query : Query ) -> None : \"\"\"Initialize an executor for query. Arguments: query: query for execution. \"\"\" super () . __init__ () self . _query = query self . _executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] def __call__ ( self , conn : AsyncIOExecutor , * args : Any , ** kwargs : Any ) -> Awaitable : \"\"\"Execute query. Arguments: conn: asynchronous EdgeDB executor. args: positional arguments. kwargs: keyword arguments. Returns: Result of query execution. \"\"\" return self . _executor ( self . _query , conn , * args , ** kwargs ) def as_json ( self ) -> \"AsyncExecutor\" : \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\" executor = copy ( self ) executor . _executor = _OPERATION_TO_JSON_EXECUTOR [ self . _query . operation_type ] return executor __call__ ( self , conn , * args , ** kwargs ) special \u00b6 Execute query. Parameters: Name Type Description Default conn AsyncIOExecutor asynchronous EdgeDB executor. required args Any positional arguments. () kwargs Any keyword arguments. {} Returns: Type Description Awaitable Result of query execution. Source code in edgeql_queries/executors/async_executor.py def __call__ ( self , conn : AsyncIOExecutor , * args : Any , ** kwargs : Any ) -> Awaitable : \"\"\"Execute query. Arguments: conn: asynchronous EdgeDB executor. args: positional arguments. kwargs: keyword arguments. Returns: Result of query execution. \"\"\" return self . _executor ( self . _query , conn , * args , ** kwargs ) __init__ ( self , query ) special \u00b6 Initialize an executor for query. Parameters: Name Type Description Default query Query query for execution. required Source code in edgeql_queries/executors/async_executor.py def __init__ ( self , query : Query ) -> None : \"\"\"Initialize an executor for query. Arguments: query: query for execution. \"\"\" super () . __init__ () self . _query = query self . _executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] as_json ( self ) \u00b6 Create an executor copy that will use JSON as output format. Returns: Type Description AsyncExecutor Copied executor. Source code in edgeql_queries/executors/async_executor.py def as_json ( self ) -> \"AsyncExecutor\" : \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\" executor = copy ( self ) executor . _executor = _OPERATION_TO_JSON_EXECUTOR [ self . _query . operation_type ] return executor base_executor \u00b6 Definition for base executor. BaseExecutor ( ABC ) \u00b6 Base executor for queries. Source code in edgeql_queries/executors/base_executor.py class BaseExecutor ( abc . ABC ): \"\"\"Base executor for queries.\"\"\" @abc . abstractmethod def as_json ( self : ExecutorT ) -> ExecutorT : # pragma: no cover \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\" as_json ( self ) \u00b6 Create an executor copy that will use JSON as output format. Returns: Type Description ~ExecutorT Copied executor. Source code in edgeql_queries/executors/base_executor.py @abc . abstractmethod def as_json ( self : ExecutorT ) -> ExecutorT : # pragma: no cover \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\" sync_executor \u00b6 Definition for creator of sync executors. SyncExecutor ( BaseExecutor ) \u00b6 Sync executor for queries. Source code in edgeql_queries/executors/sync_executor.py class SyncExecutor ( BaseExecutor ): \"\"\"Sync executor for queries.\"\"\" def __init__ ( self , query : Query ) -> None : \"\"\"Initialize an executor for query. Arguments: query: query for execution. \"\"\" super () . __init__ () self . _query = query self . _executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] def __call__ ( self , conn : Executor , * args : Any , ** kwargs : Any ) -> Any : \"\"\"Execute query. Arguments: conn: synchronous EdgeDB executor. args: positional arguments. kwargs: keyword arguments. Returns: Result of query execution. \"\"\" return self . _executor ( self . _query , conn , * args , ** kwargs ) def as_json ( self ) -> \"SyncExecutor\" : \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\" executor = copy ( self ) executor . _executor = _OPERATION_TO_JSON_EXECUTOR [ self . _query . operation_type ] return executor __call__ ( self , conn , * args , ** kwargs ) special \u00b6 Execute query. Parameters: Name Type Description Default conn Executor synchronous EdgeDB executor. required args Any positional arguments. () kwargs Any keyword arguments. {} Returns: Type Description Any Result of query execution. Source code in edgeql_queries/executors/sync_executor.py def __call__ ( self , conn : Executor , * args : Any , ** kwargs : Any ) -> Any : \"\"\"Execute query. Arguments: conn: synchronous EdgeDB executor. args: positional arguments. kwargs: keyword arguments. Returns: Result of query execution. \"\"\" return self . _executor ( self . _query , conn , * args , ** kwargs ) __init__ ( self , query ) special \u00b6 Initialize an executor for query. Parameters: Name Type Description Default query Query query for execution. required Source code in edgeql_queries/executors/sync_executor.py def __init__ ( self , query : Query ) -> None : \"\"\"Initialize an executor for query. Arguments: query: query for execution. \"\"\" super () . __init__ () self . _query = query self . _executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] as_json ( self ) \u00b6 Create an executor copy that will use JSON as output format. Returns: Type Description SyncExecutor Copied executor. Source code in edgeql_queries/executors/sync_executor.py def as_json ( self ) -> \"SyncExecutor\" : \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\" executor = copy ( self ) executor . _executor = _OPERATION_TO_JSON_EXECUTOR [ self . _query . operation_type ] return executor","title":"Executors"},{"location":"reference/executors/#edgeql_queries.executors.async_executor","text":"Definition for creator of async executors.","title":"async_executor"},{"location":"reference/executors/#edgeql_queries.executors.async_executor.AsyncExecutor","text":"Async executor for queries. Source code in edgeql_queries/executors/async_executor.py class AsyncExecutor ( BaseExecutor ): \"\"\"Async executor for queries.\"\"\" def __init__ ( self , query : Query ) -> None : \"\"\"Initialize an executor for query. Arguments: query: query for execution. \"\"\" super () . __init__ () self . _query = query self . _executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] def __call__ ( self , conn : AsyncIOExecutor , * args : Any , ** kwargs : Any ) -> Awaitable : \"\"\"Execute query. Arguments: conn: asynchronous EdgeDB executor. args: positional arguments. kwargs: keyword arguments. Returns: Result of query execution. \"\"\" return self . _executor ( self . _query , conn , * args , ** kwargs ) def as_json ( self ) -> \"AsyncExecutor\" : \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\" executor = copy ( self ) executor . _executor = _OPERATION_TO_JSON_EXECUTOR [ self . _query . operation_type ] return executor","title":"AsyncExecutor"},{"location":"reference/executors/#edgeql_queries.executors.async_executor.AsyncExecutor.__call__","text":"Execute query. Parameters: Name Type Description Default conn AsyncIOExecutor asynchronous EdgeDB executor. required args Any positional arguments. () kwargs Any keyword arguments. {} Returns: Type Description Awaitable Result of query execution. Source code in edgeql_queries/executors/async_executor.py def __call__ ( self , conn : AsyncIOExecutor , * args : Any , ** kwargs : Any ) -> Awaitable : \"\"\"Execute query. Arguments: conn: asynchronous EdgeDB executor. args: positional arguments. kwargs: keyword arguments. Returns: Result of query execution. \"\"\" return self . _executor ( self . _query , conn , * args , ** kwargs )","title":"__call__()"},{"location":"reference/executors/#edgeql_queries.executors.async_executor.AsyncExecutor.__init__","text":"Initialize an executor for query. Parameters: Name Type Description Default query Query query for execution. required Source code in edgeql_queries/executors/async_executor.py def __init__ ( self , query : Query ) -> None : \"\"\"Initialize an executor for query. Arguments: query: query for execution. \"\"\" super () . __init__ () self . _query = query self . _executor = _OPERATION_TO_EXECUTOR [ query . operation_type ]","title":"__init__()"},{"location":"reference/executors/#edgeql_queries.executors.async_executor.AsyncExecutor.as_json","text":"Create an executor copy that will use JSON as output format. Returns: Type Description AsyncExecutor Copied executor. Source code in edgeql_queries/executors/async_executor.py def as_json ( self ) -> \"AsyncExecutor\" : \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\" executor = copy ( self ) executor . _executor = _OPERATION_TO_JSON_EXECUTOR [ self . _query . operation_type ] return executor","title":"as_json()"},{"location":"reference/executors/#edgeql_queries.executors.base_executor","text":"Definition for base executor.","title":"base_executor"},{"location":"reference/executors/#edgeql_queries.executors.base_executor.BaseExecutor","text":"Base executor for queries. Source code in edgeql_queries/executors/base_executor.py class BaseExecutor ( abc . ABC ): \"\"\"Base executor for queries.\"\"\" @abc . abstractmethod def as_json ( self : ExecutorT ) -> ExecutorT : # pragma: no cover \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\"","title":"BaseExecutor"},{"location":"reference/executors/#edgeql_queries.executors.base_executor.BaseExecutor.as_json","text":"Create an executor copy that will use JSON as output format. Returns: Type Description ~ExecutorT Copied executor. Source code in edgeql_queries/executors/base_executor.py @abc . abstractmethod def as_json ( self : ExecutorT ) -> ExecutorT : # pragma: no cover \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\"","title":"as_json()"},{"location":"reference/executors/#edgeql_queries.executors.sync_executor","text":"Definition for creator of sync executors.","title":"sync_executor"},{"location":"reference/executors/#edgeql_queries.executors.sync_executor.SyncExecutor","text":"Sync executor for queries. Source code in edgeql_queries/executors/sync_executor.py class SyncExecutor ( BaseExecutor ): \"\"\"Sync executor for queries.\"\"\" def __init__ ( self , query : Query ) -> None : \"\"\"Initialize an executor for query. Arguments: query: query for execution. \"\"\" super () . __init__ () self . _query = query self . _executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] def __call__ ( self , conn : Executor , * args : Any , ** kwargs : Any ) -> Any : \"\"\"Execute query. Arguments: conn: synchronous EdgeDB executor. args: positional arguments. kwargs: keyword arguments. Returns: Result of query execution. \"\"\" return self . _executor ( self . _query , conn , * args , ** kwargs ) def as_json ( self ) -> \"SyncExecutor\" : \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\" executor = copy ( self ) executor . _executor = _OPERATION_TO_JSON_EXECUTOR [ self . _query . operation_type ] return executor","title":"SyncExecutor"},{"location":"reference/executors/#edgeql_queries.executors.sync_executor.SyncExecutor.__call__","text":"Execute query. Parameters: Name Type Description Default conn Executor synchronous EdgeDB executor. required args Any positional arguments. () kwargs Any keyword arguments. {} Returns: Type Description Any Result of query execution. Source code in edgeql_queries/executors/sync_executor.py def __call__ ( self , conn : Executor , * args : Any , ** kwargs : Any ) -> Any : \"\"\"Execute query. Arguments: conn: synchronous EdgeDB executor. args: positional arguments. kwargs: keyword arguments. Returns: Result of query execution. \"\"\" return self . _executor ( self . _query , conn , * args , ** kwargs )","title":"__call__()"},{"location":"reference/executors/#edgeql_queries.executors.sync_executor.SyncExecutor.__init__","text":"Initialize an executor for query. Parameters: Name Type Description Default query Query query for execution. required Source code in edgeql_queries/executors/sync_executor.py def __init__ ( self , query : Query ) -> None : \"\"\"Initialize an executor for query. Arguments: query: query for execution. \"\"\" super () . __init__ () self . _query = query self . _executor = _OPERATION_TO_EXECUTOR [ query . operation_type ]","title":"__init__()"},{"location":"reference/executors/#edgeql_queries.executors.sync_executor.SyncExecutor.as_json","text":"Create an executor copy that will use JSON as output format. Returns: Type Description SyncExecutor Copied executor. Source code in edgeql_queries/executors/sync_executor.py def as_json ( self ) -> \"SyncExecutor\" : \"\"\"Create an executor copy that will use JSON as output format. Returns: Copied executor. \"\"\" executor = copy ( self ) executor . _executor = _OPERATION_TO_JSON_EXECUTOR [ self . _query . operation_type ] return executor","title":"as_json()"},{"location":"reference/loaders/","text":"Definition of loaders for queries. from_path ( edgeql_path , async_driver = True ) \u00b6 Load queries by path to .edgeql file or directory with them. Parameters: Name Type Description Default edgeql_path Union[str, pathlib.Path] path to .edgeql file with queries or directory with queries. required async_driver bool create async executors for using with async driver. True Returns: Type Description Queries Loaded and parsed queries. Exceptions: Type Description EdgeQLLoadError if path to queries does not exist. Source code in edgeql_queries/loaders.py def from_path ( edgeql_path : Union [ str , Path ], async_driver : bool = True ) -> Queries : \"\"\"Load queries by path to `.edgeql` file or directory with them. Arguments: edgeql_path: path to `.edgeql` file with queries or directory with queries. async_driver: create async executors for using with async driver. Returns: Loaded and parsed queries. Raises: EdgeQLLoadError: if path to queries does not exist. \"\"\" path = Path ( edgeql_path ) if not path . exists (): raise EdgeQLLoadError ( \" {0} does not exist\" . format ( path )) queries = Queries ( async_driver ) if path . is_file (): query_data = load_query_data_from_file ( path ) return load_from_list ( queries , query_data ) elif path . is_dir (): query_data_tree = load_query_data_from_dir_path ( path ) return load_from_tree ( queries , query_data_tree ) raise EdgeQLLoadError ( \"edgeql_path must be a directory or file, got {0} \" . format ( edgeql_path ), )","title":"Loaders"},{"location":"reference/loaders/#edgeql_queries.loaders.from_path","text":"Load queries by path to .edgeql file or directory with them. Parameters: Name Type Description Default edgeql_path Union[str, pathlib.Path] path to .edgeql file with queries or directory with queries. required async_driver bool create async executors for using with async driver. True Returns: Type Description Queries Loaded and parsed queries. Exceptions: Type Description EdgeQLLoadError if path to queries does not exist. Source code in edgeql_queries/loaders.py def from_path ( edgeql_path : Union [ str , Path ], async_driver : bool = True ) -> Queries : \"\"\"Load queries by path to `.edgeql` file or directory with them. Arguments: edgeql_path: path to `.edgeql` file with queries or directory with queries. async_driver: create async executors for using with async driver. Returns: Loaded and parsed queries. Raises: EdgeQLLoadError: if path to queries does not exist. \"\"\" path = Path ( edgeql_path ) if not path . exists (): raise EdgeQLLoadError ( \" {0} does not exist\" . format ( path )) queries = Queries ( async_driver ) if path . is_file (): query_data = load_query_data_from_file ( path ) return load_from_list ( queries , query_data ) elif path . is_dir (): query_data_tree = load_query_data_from_dir_path ( path ) return load_from_tree ( queries , query_data_tree ) raise EdgeQLLoadError ( \"edgeql_path must be a directory or file, got {0} \" . format ( edgeql_path ), )","title":"from_path()"},{"location":"reference/models/","text":"Definition for main data models used in this library. EdgeQLOperationType ( IntEnum ) \u00b6 Enumeration for operation types for queries. Source code in edgeql_queries/models.py class EdgeQLOperationType ( IntEnum ): \"\"\"Enumeration for operation types for queries.\"\"\" #: type for operation that definetly returns a single object. required_single_return = auto () #: type for operation that optionally returns a single object. single_return = auto () #: type for operation that returns a common set of object. set_return = auto () #: type for operation that returns nothing. execute = auto () Query dataclass \u00b6 Parsed query. Source code in edgeql_queries/models.py @dataclass ( frozen = True ) class Query : \"\"\"Parsed query.\"\"\" #: name of parsed query. name : str #: query operation type. operation_type : EdgeQLOperationType #: EdgeQL query that should be executed. edgeql : str def __str__ ( self ) -> str : \"\"\"Return string representation of query. Returns: String representation of query that is its name. \"\"\" return self . name def __repr__ ( self ) -> str : \"\"\"Return raw string representation of query. Returns: Raw string representation of query that contains all fields. \"\"\" return \"Query(name: {0!r} , operation_type: {1} , edgeql: {2!r} )\" . format ( self . name , self . operation_type . name , self . edgeql , ) __repr__ ( self ) special \u00b6 Return raw string representation of query. Returns: Type Description str Raw string representation of query that contains all fields. Source code in edgeql_queries/models.py def __repr__ ( self ) -> str : \"\"\"Return raw string representation of query. Returns: Raw string representation of query that contains all fields. \"\"\" return \"Query(name: {0!r} , operation_type: {1} , edgeql: {2!r} )\" . format ( self . name , self . operation_type . name , self . edgeql , ) __str__ ( self ) special \u00b6 Return string representation of query. Returns: Type Description str String representation of query that is its name. Source code in edgeql_queries/models.py def __str__ ( self ) -> str : \"\"\"Return string representation of query. Returns: String representation of query that is its name. \"\"\" return self . name","title":"Models"},{"location":"reference/models/#edgeql_queries.models.EdgeQLOperationType","text":"Enumeration for operation types for queries. Source code in edgeql_queries/models.py class EdgeQLOperationType ( IntEnum ): \"\"\"Enumeration for operation types for queries.\"\"\" #: type for operation that definetly returns a single object. required_single_return = auto () #: type for operation that optionally returns a single object. single_return = auto () #: type for operation that returns a common set of object. set_return = auto () #: type for operation that returns nothing. execute = auto ()","title":"EdgeQLOperationType"},{"location":"reference/models/#edgeql_queries.models.Query","text":"Parsed query. Source code in edgeql_queries/models.py @dataclass ( frozen = True ) class Query : \"\"\"Parsed query.\"\"\" #: name of parsed query. name : str #: query operation type. operation_type : EdgeQLOperationType #: EdgeQL query that should be executed. edgeql : str def __str__ ( self ) -> str : \"\"\"Return string representation of query. Returns: String representation of query that is its name. \"\"\" return self . name def __repr__ ( self ) -> str : \"\"\"Return raw string representation of query. Returns: Raw string representation of query that contains all fields. \"\"\" return \"Query(name: {0!r} , operation_type: {1} , edgeql: {2!r} )\" . format ( self . name , self . operation_type . name , self . edgeql , )","title":"Query"},{"location":"reference/models/#edgeql_queries.models.Query.__repr__","text":"Return raw string representation of query. Returns: Type Description str Raw string representation of query that contains all fields. Source code in edgeql_queries/models.py def __repr__ ( self ) -> str : \"\"\"Return raw string representation of query. Returns: Raw string representation of query that contains all fields. \"\"\" return \"Query(name: {0!r} , operation_type: {1} , edgeql: {2!r} )\" . format ( self . name , self . operation_type . name , self . edgeql , )","title":"__repr__()"},{"location":"reference/models/#edgeql_queries.models.Query.__str__","text":"Return string representation of query. Returns: Type Description str String representation of query that is its name. Source code in edgeql_queries/models.py def __str__ ( self ) -> str : \"\"\"Return string representation of query. Returns: String representation of query that is its name. \"\"\" return self . name","title":"__str__()"},{"location":"reference/parsing/","text":"Definition for parsing functions for queries. Queries that are acceptable by this library should follow some rules: They should be named. Their names should not contain symbols that could not be used in Python identifier( except for - symbol since it would be converted into _ ) They can have special symbols after their names that will change how this queries will be executed: * : query will be executed as script with using .execute method from driver. + : query will return a single object or None and executed with .query_single method from driver. ! : query will always return a single object and executed with .query_required_single method from driver. empty: common query that will return a set of objects and will be executed with .query method from driver. An example query that can be successfuly parsed: # name: select-user-by-username! # Find user by username and return it. SELECT User { username, bio, is_active } FILTER .username = < str > $username LIMIT 1 get_query_name_and_operation ( name ) \u00b6 Return query name and operation from query headers. Parameters: Name Type Description Default name str raw query name with operator from which final name and operation should be extracted. required Returns: Type Description Tuple[str, edgeql_queries.models.EdgeQLOperationType] Query name and operation type Exceptions: Type Description EdgeQLParsingError if header is in wrong format or name could not be converted into Python identificator. Source code in edgeql_queries/parsing.py def get_query_name_and_operation ( name : str ) -> Tuple [ str , EdgeQLOperationType ]: \"\"\"Return query name and operation from query headers. Arguments: name: raw query name with operator from which final name and operation should be extracted. Returns: Query name and [operation type][edgeql_queries.models.EdgeQLOperationType] Raises: EdgeQLParsingError: if header is in wrong format or name could not be converted into Python identificator. \"\"\" name = name . replace ( \"-\" , \"_\" ) operation_suffix = \"\" for suffix in _OPERATION_SUFFFIXES_TO_TYPES : # pragma: no branch if name . endswith ( suffix ): operation_suffix = suffix break if operation_suffix : query_name = name [: - len ( operation_suffix )] else : query_name = name if not VALID_QUERY_NAME_PATTERN . match ( query_name ): raise EdgeQLParsingError ( 'name must be convertable to valid python variable, got \" {0} \"' . format ( query_name , ), ) return ( query_name , _OPERATION_SUFFFIXES_TO_TYPES [ operation_suffix ], ) parse_query_from_string ( raw_name , query_body ) \u00b6 Parse EdgeQL query string into [edgeql_queries.models.Query]. Parameters: Name Type Description Default raw_name str query name with operation. required query_body str EdgeQL query. required Returns: Type Description Query [edgeql_queries.models.Query] that will be later added for creating executors. Source code in edgeql_queries/parsing.py def parse_query_from_string ( raw_name : str , query_body : str ) -> Query : \"\"\"Parse EdgeQL query string into [edgeql_queries.models.Query]. Arguments: raw_name: query name with operation. query_body: EdgeQL query. Returns: [edgeql_queries.models.Query] that will be later added for creating executors. \"\"\" query_name , operation_type = get_query_name_and_operation ( raw_name ) return Query ( query_name , operation_type , query_body )","title":"Parsing"},{"location":"reference/parsing/#edgeql_queries.parsing.get_query_name_and_operation","text":"Return query name and operation from query headers. Parameters: Name Type Description Default name str raw query name with operator from which final name and operation should be extracted. required Returns: Type Description Tuple[str, edgeql_queries.models.EdgeQLOperationType] Query name and operation type Exceptions: Type Description EdgeQLParsingError if header is in wrong format or name could not be converted into Python identificator. Source code in edgeql_queries/parsing.py def get_query_name_and_operation ( name : str ) -> Tuple [ str , EdgeQLOperationType ]: \"\"\"Return query name and operation from query headers. Arguments: name: raw query name with operator from which final name and operation should be extracted. Returns: Query name and [operation type][edgeql_queries.models.EdgeQLOperationType] Raises: EdgeQLParsingError: if header is in wrong format or name could not be converted into Python identificator. \"\"\" name = name . replace ( \"-\" , \"_\" ) operation_suffix = \"\" for suffix in _OPERATION_SUFFFIXES_TO_TYPES : # pragma: no branch if name . endswith ( suffix ): operation_suffix = suffix break if operation_suffix : query_name = name [: - len ( operation_suffix )] else : query_name = name if not VALID_QUERY_NAME_PATTERN . match ( query_name ): raise EdgeQLParsingError ( 'name must be convertable to valid python variable, got \" {0} \"' . format ( query_name , ), ) return ( query_name , _OPERATION_SUFFFIXES_TO_TYPES [ operation_suffix ], )","title":"get_query_name_and_operation()"},{"location":"reference/parsing/#edgeql_queries.parsing.parse_query_from_string","text":"Parse EdgeQL query string into [edgeql_queries.models.Query]. Parameters: Name Type Description Default raw_name str query name with operation. required query_body str EdgeQL query. required Returns: Type Description Query [edgeql_queries.models.Query] that will be later added for creating executors. Source code in edgeql_queries/parsing.py def parse_query_from_string ( raw_name : str , query_body : str ) -> Query : \"\"\"Parse EdgeQL query string into [edgeql_queries.models.Query]. Arguments: raw_name: query name with operation. query_body: EdgeQL query. Returns: [edgeql_queries.models.Query] that will be later added for creating executors. \"\"\" query_name , operation_type = get_query_name_and_operation ( raw_name ) return Query ( query_name , operation_type , query_body )","title":"parse_query_from_string()"},{"location":"reference/queries/","text":"Definition for main collection for queries. Queries \u00b6 Collection and executor for queries. Source code in edgeql_queries/queries.py class Queries : \"\"\"Collection and executor for queries.\"\"\" def __init__ ( self , is_async : bool = True ) -> None : \"\"\"Initialize collection and executor for queries. Arguments: is_async: use async driver for creating queries. \"\"\" self . _query_handlers : Dict [ str , QueryHandler ] = {} self . _available_queries : Set [ Query ] = set () self . _available_queries_groups : Dict [ str , Queries ] = {} self . _is_async = is_async self . _json = False @property def available_queries ( self ) -> List [ Query ]: \"\"\"Sorted list of queries available on this collection. Returns: List of queries. \"\"\" return sorted ( self . _available_queries , key = lambda query : query . name ) @property def is_async ( self ) -> bool : \"\"\"Will be query handlers generated for async execution. Returns: Will be query handlers generated for async execution. \"\"\" return self . _is_async @property def json ( self ) -> \"Queries\" : \"\"\"Return copy of queries that will use JSON as output format. Returns: Copied queries. \"\"\" handlers = {} for name , query_handler in self . _query_handlers . items (): if isinstance ( query_handler , Queries ): query_handler = query_handler . json else : query_handler = query_handler . as_json () handlers [ name ] = query_handler queries = self . __class__ () queries . _query_handlers = handlers queries . _json = True queries . _available_queries = self . _available_queries queries . _available_queries_groups = self . _available_queries_groups queries . _is_async = self . _is_async return queries def add_query ( self , name : str , query_handler : Union [ Queries , Query ]) -> None : \"\"\"Add a single query to collection. Arguments: name: name of query or sub-queries to be added. query_handler: a single [query][edgeql_queries.models.Query] that will be transformed to executor or [collection of queries][edgeql_queries.queries.Queries] that will be registered as sub-queries. \"\"\" handler_for_query : Union [ Callable , Queries ] if isinstance ( query_handler , Query ): self . _available_queries . add ( query_handler ) if self . _is_async : handler_for_query = AsyncExecutor ( query_handler ) else : handler_for_query = SyncExecutor ( query_handler ) else : handler_for_query = query_handler self . _available_queries_groups [ name ] = handler_for_query self . _query_handlers [ name ] = handler_for_query def get_executor ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Return executor for query by name. Arguments: query_name: name of query for which executor should be returned. Returns: Executor for query. \"\"\" return self . _query_handlers [ query_name ] def __getattr__ ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Get executor for query by name. Arguments: query_name: name of query or group. Returns: Executor for query. \"\"\" return self . get_executor ( query_name ) def __repr__ ( self ) -> str : \"\"\"Return special string representation of collection. Returns: Raw string for queries collection. \"\"\" return \"Queries(queries: {0} , groups: {1} )\" . format ( self . available_queries , self . _available_queries_groups , ) available_queries : List [ Query ] property readonly \u00b6 Sorted list of queries available on this collection. Returns: Type Description List[Query] List of queries. is_async : bool property readonly \u00b6 Will be query handlers generated for async execution. Returns: Type Description bool Will be query handlers generated for async execution. json : 'Queries' property readonly \u00b6 Return copy of queries that will use JSON as output format. Returns: Type Description 'Queries' Copied queries. __getattr__ ( self , query_name ) special \u00b6 Get executor for query by name. Parameters: Name Type Description Default query_name str name of query or group. required Returns: Type Description Union[Callable, 'Queries'] Executor for query. Source code in edgeql_queries/queries.py def __getattr__ ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Get executor for query by name. Arguments: query_name: name of query or group. Returns: Executor for query. \"\"\" return self . get_executor ( query_name ) __init__ ( self , is_async = True ) special \u00b6 Initialize collection and executor for queries. Parameters: Name Type Description Default is_async bool use async driver for creating queries. True Source code in edgeql_queries/queries.py def __init__ ( self , is_async : bool = True ) -> None : \"\"\"Initialize collection and executor for queries. Arguments: is_async: use async driver for creating queries. \"\"\" self . _query_handlers : Dict [ str , QueryHandler ] = {} self . _available_queries : Set [ Query ] = set () self . _available_queries_groups : Dict [ str , Queries ] = {} self . _is_async = is_async self . _json = False __repr__ ( self ) special \u00b6 Return special string representation of collection. Returns: Type Description str Raw string for queries collection. Source code in edgeql_queries/queries.py def __repr__ ( self ) -> str : \"\"\"Return special string representation of collection. Returns: Raw string for queries collection. \"\"\" return \"Queries(queries: {0} , groups: {1} )\" . format ( self . available_queries , self . _available_queries_groups , ) add_query ( self , name , query_handler ) \u00b6 Add a single query to collection. Parameters: Name Type Description Default name str name of query or sub-queries to be added. required query_handler Union[Queries, Query] a single query that will be transformed to executor or collection of queries that will be registered as sub-queries. required Source code in edgeql_queries/queries.py def add_query ( self , name : str , query_handler : Union [ Queries , Query ]) -> None : \"\"\"Add a single query to collection. Arguments: name: name of query or sub-queries to be added. query_handler: a single [query][edgeql_queries.models.Query] that will be transformed to executor or [collection of queries][edgeql_queries.queries.Queries] that will be registered as sub-queries. \"\"\" handler_for_query : Union [ Callable , Queries ] if isinstance ( query_handler , Query ): self . _available_queries . add ( query_handler ) if self . _is_async : handler_for_query = AsyncExecutor ( query_handler ) else : handler_for_query = SyncExecutor ( query_handler ) else : handler_for_query = query_handler self . _available_queries_groups [ name ] = handler_for_query self . _query_handlers [ name ] = handler_for_query get_executor ( self , query_name ) \u00b6 Return executor for query by name. Parameters: Name Type Description Default query_name str name of query for which executor should be returned. required Returns: Type Description Union[Callable, 'Queries'] Executor for query. Source code in edgeql_queries/queries.py def get_executor ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Return executor for query by name. Arguments: query_name: name of query for which executor should be returned. Returns: Executor for query. \"\"\" return self . _query_handlers [ query_name ] load_from_list ( queries_collection , queries ) \u00b6 Add queries from list. Parameters: Name Type Description Default queries_collection Queries already registered queries. required queries List[Query] list of queries to be added. required Returns: Type Description Queries Collection of queries to which method was applied. Source code in edgeql_queries/queries.py def load_from_list ( queries_collection : Queries , queries : List [ Query ]) -> Queries : \"\"\"Add queries from list. Arguments: queries_collection: already registered queries. queries: list of queries to be added. Returns: Collection of queries to which method was applied. \"\"\" for query in queries : queries_collection . add_query ( query . name , query ) return queries_collection load_from_tree ( queries_collection , query_tree ) \u00b6 Add queries from tree. Parameters: Name Type Description Default queries_collection Queries already registered queries. required query_tree QueriesTree tree of queries that should be added. required Returns: Type Description Queries Collection of queries to which method was applied. Source code in edgeql_queries/queries.py def load_from_tree ( queries_collection : Queries , query_tree : QueriesTree ) -> Queries : \"\"\"Add queries from tree. Arguments: queries_collection: already registered queries. query_tree: tree of queries that should be added. Returns: Collection of queries to which method was applied. \"\"\" for group_name , queries in query_tree . items (): if isinstance ( queries , dict ): queries_collection . add_query ( group_name , load_from_tree ( Queries ( queries_collection . is_async ), queries ), ) else : queries_collection . add_query ( queries . name , queries ) return queries_collection","title":"Queries"},{"location":"reference/queries/#edgeql_queries.queries.Queries","text":"Collection and executor for queries. Source code in edgeql_queries/queries.py class Queries : \"\"\"Collection and executor for queries.\"\"\" def __init__ ( self , is_async : bool = True ) -> None : \"\"\"Initialize collection and executor for queries. Arguments: is_async: use async driver for creating queries. \"\"\" self . _query_handlers : Dict [ str , QueryHandler ] = {} self . _available_queries : Set [ Query ] = set () self . _available_queries_groups : Dict [ str , Queries ] = {} self . _is_async = is_async self . _json = False @property def available_queries ( self ) -> List [ Query ]: \"\"\"Sorted list of queries available on this collection. Returns: List of queries. \"\"\" return sorted ( self . _available_queries , key = lambda query : query . name ) @property def is_async ( self ) -> bool : \"\"\"Will be query handlers generated for async execution. Returns: Will be query handlers generated for async execution. \"\"\" return self . _is_async @property def json ( self ) -> \"Queries\" : \"\"\"Return copy of queries that will use JSON as output format. Returns: Copied queries. \"\"\" handlers = {} for name , query_handler in self . _query_handlers . items (): if isinstance ( query_handler , Queries ): query_handler = query_handler . json else : query_handler = query_handler . as_json () handlers [ name ] = query_handler queries = self . __class__ () queries . _query_handlers = handlers queries . _json = True queries . _available_queries = self . _available_queries queries . _available_queries_groups = self . _available_queries_groups queries . _is_async = self . _is_async return queries def add_query ( self , name : str , query_handler : Union [ Queries , Query ]) -> None : \"\"\"Add a single query to collection. Arguments: name: name of query or sub-queries to be added. query_handler: a single [query][edgeql_queries.models.Query] that will be transformed to executor or [collection of queries][edgeql_queries.queries.Queries] that will be registered as sub-queries. \"\"\" handler_for_query : Union [ Callable , Queries ] if isinstance ( query_handler , Query ): self . _available_queries . add ( query_handler ) if self . _is_async : handler_for_query = AsyncExecutor ( query_handler ) else : handler_for_query = SyncExecutor ( query_handler ) else : handler_for_query = query_handler self . _available_queries_groups [ name ] = handler_for_query self . _query_handlers [ name ] = handler_for_query def get_executor ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Return executor for query by name. Arguments: query_name: name of query for which executor should be returned. Returns: Executor for query. \"\"\" return self . _query_handlers [ query_name ] def __getattr__ ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Get executor for query by name. Arguments: query_name: name of query or group. Returns: Executor for query. \"\"\" return self . get_executor ( query_name ) def __repr__ ( self ) -> str : \"\"\"Return special string representation of collection. Returns: Raw string for queries collection. \"\"\" return \"Queries(queries: {0} , groups: {1} )\" . format ( self . available_queries , self . _available_queries_groups , )","title":"Queries"},{"location":"reference/queries/#edgeql_queries.queries.Queries.available_queries","text":"Sorted list of queries available on this collection. Returns: Type Description List[Query] List of queries.","title":"available_queries"},{"location":"reference/queries/#edgeql_queries.queries.Queries.is_async","text":"Will be query handlers generated for async execution. Returns: Type Description bool Will be query handlers generated for async execution.","title":"is_async"},{"location":"reference/queries/#edgeql_queries.queries.Queries.json","text":"Return copy of queries that will use JSON as output format. Returns: Type Description 'Queries' Copied queries.","title":"json"},{"location":"reference/queries/#edgeql_queries.queries.Queries.__getattr__","text":"Get executor for query by name. Parameters: Name Type Description Default query_name str name of query or group. required Returns: Type Description Union[Callable, 'Queries'] Executor for query. Source code in edgeql_queries/queries.py def __getattr__ ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Get executor for query by name. Arguments: query_name: name of query or group. Returns: Executor for query. \"\"\" return self . get_executor ( query_name )","title":"__getattr__()"},{"location":"reference/queries/#edgeql_queries.queries.Queries.__init__","text":"Initialize collection and executor for queries. Parameters: Name Type Description Default is_async bool use async driver for creating queries. True Source code in edgeql_queries/queries.py def __init__ ( self , is_async : bool = True ) -> None : \"\"\"Initialize collection and executor for queries. Arguments: is_async: use async driver for creating queries. \"\"\" self . _query_handlers : Dict [ str , QueryHandler ] = {} self . _available_queries : Set [ Query ] = set () self . _available_queries_groups : Dict [ str , Queries ] = {} self . _is_async = is_async self . _json = False","title":"__init__()"},{"location":"reference/queries/#edgeql_queries.queries.Queries.__repr__","text":"Return special string representation of collection. Returns: Type Description str Raw string for queries collection. Source code in edgeql_queries/queries.py def __repr__ ( self ) -> str : \"\"\"Return special string representation of collection. Returns: Raw string for queries collection. \"\"\" return \"Queries(queries: {0} , groups: {1} )\" . format ( self . available_queries , self . _available_queries_groups , )","title":"__repr__()"},{"location":"reference/queries/#edgeql_queries.queries.Queries.add_query","text":"Add a single query to collection. Parameters: Name Type Description Default name str name of query or sub-queries to be added. required query_handler Union[Queries, Query] a single query that will be transformed to executor or collection of queries that will be registered as sub-queries. required Source code in edgeql_queries/queries.py def add_query ( self , name : str , query_handler : Union [ Queries , Query ]) -> None : \"\"\"Add a single query to collection. Arguments: name: name of query or sub-queries to be added. query_handler: a single [query][edgeql_queries.models.Query] that will be transformed to executor or [collection of queries][edgeql_queries.queries.Queries] that will be registered as sub-queries. \"\"\" handler_for_query : Union [ Callable , Queries ] if isinstance ( query_handler , Query ): self . _available_queries . add ( query_handler ) if self . _is_async : handler_for_query = AsyncExecutor ( query_handler ) else : handler_for_query = SyncExecutor ( query_handler ) else : handler_for_query = query_handler self . _available_queries_groups [ name ] = handler_for_query self . _query_handlers [ name ] = handler_for_query","title":"add_query()"},{"location":"reference/queries/#edgeql_queries.queries.Queries.get_executor","text":"Return executor for query by name. Parameters: Name Type Description Default query_name str name of query for which executor should be returned. required Returns: Type Description Union[Callable, 'Queries'] Executor for query. Source code in edgeql_queries/queries.py def get_executor ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Return executor for query by name. Arguments: query_name: name of query for which executor should be returned. Returns: Executor for query. \"\"\" return self . _query_handlers [ query_name ]","title":"get_executor()"},{"location":"reference/queries/#edgeql_queries.queries.load_from_list","text":"Add queries from list. Parameters: Name Type Description Default queries_collection Queries already registered queries. required queries List[Query] list of queries to be added. required Returns: Type Description Queries Collection of queries to which method was applied. Source code in edgeql_queries/queries.py def load_from_list ( queries_collection : Queries , queries : List [ Query ]) -> Queries : \"\"\"Add queries from list. Arguments: queries_collection: already registered queries. queries: list of queries to be added. Returns: Collection of queries to which method was applied. \"\"\" for query in queries : queries_collection . add_query ( query . name , query ) return queries_collection","title":"load_from_list()"},{"location":"reference/queries/#edgeql_queries.queries.load_from_tree","text":"Add queries from tree. Parameters: Name Type Description Default queries_collection Queries already registered queries. required query_tree QueriesTree tree of queries that should be added. required Returns: Type Description Queries Collection of queries to which method was applied. Source code in edgeql_queries/queries.py def load_from_tree ( queries_collection : Queries , query_tree : QueriesTree ) -> Queries : \"\"\"Add queries from tree. Arguments: queries_collection: already registered queries. query_tree: tree of queries that should be added. Returns: Collection of queries to which method was applied. \"\"\" for group_name , queries in query_tree . items (): if isinstance ( queries , dict ): queries_collection . add_query ( group_name , load_from_tree ( Queries ( queries_collection . is_async ), queries ), ) else : queries_collection . add_query ( queries . name , queries ) return queries_collection","title":"load_from_tree()"},{"location":"reference/query_loaders/","text":"Definition of loader for queries from files and directories. load_query_data_from_dir_path ( dir_path ) \u00b6 Load queries from esdl file. Parameters: Name Type Description Default dir_path Path path to file with queriesto be parsed. required Returns: Type Description Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] List of queries that will be used later by container for them. Exceptions: Type Description ValueError if dir_path is not directory. Source code in edgeql_queries/query_loaders.py def load_query_data_from_dir_path ( dir_path : Path ) -> QueriesTree : \"\"\"Load queries from esdl file. Arguments: dir_path: path to file with queriesto be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Raises: ValueError: if dir_path is not directory. \"\"\" if not dir_path . is_dir (): raise ValueError ( \"path {0} must be a directory\" . format ( dir_path )) return _load_query_data_tree ( dir_path , dir_path ) load_query_data_from_edgeql ( edgeql ) \u00b6 Load queries from string. Parameters: Name Type Description Default edgeql str edgeql string that contains queries to be parsed. required Returns: Type Description List[edgeql_queries.models.Query] List of queries that will be used later by container for them. Source code in edgeql_queries/query_loaders.py def load_query_data_from_edgeql ( edgeql : str ) -> List [ Query ]: \"\"\"Load queries from string. Arguments: edgeql: edgeql string that contains queries to be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. \"\"\" query_data = [] matches_iter = _iter_pairs ( QUERY_DEFINITION_PATTERN . finditer ( edgeql )) for ( start_match , end_match ) in matches_iter : if end_match is not None : end_position = end_match . start () else : end_position = len ( edgeql ) query_data . append ( parse_query_from_string ( start_match . groups ()[ 0 ], edgeql [ start_match . end () : end_position ], ), ) return query_data load_query_data_from_file ( file_path ) \u00b6 Load queries from esdl file. Parameters: Name Type Description Default file_path Path path to file with queries to be parsed. required Returns: Type Description List[edgeql_queries.models.Query] List of queries that will be used later by container for them. Exceptions: Type Description FileNotFoundError if failed to open file. # noqa: DAR402 Source code in edgeql_queries/query_loaders.py def load_query_data_from_file ( file_path : Path ) -> List [ Query ]: \"\"\"Load queries from esdl file. Arguments: file_path: path to file with queries to be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Raises: FileNotFoundError: if failed to open file. # noqa: DAR402 \"\"\" with open ( file_path ) as edgeql_file : return load_query_data_from_edgeql ( edgeql_file . read ())","title":"Query Loaders"},{"location":"reference/query_loaders/#edgeql_queries.query_loaders.load_query_data_from_dir_path","text":"Load queries from esdl file. Parameters: Name Type Description Default dir_path Path path to file with queriesto be parsed. required Returns: Type Description Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] List of queries that will be used later by container for them. Exceptions: Type Description ValueError if dir_path is not directory. Source code in edgeql_queries/query_loaders.py def load_query_data_from_dir_path ( dir_path : Path ) -> QueriesTree : \"\"\"Load queries from esdl file. Arguments: dir_path: path to file with queriesto be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Raises: ValueError: if dir_path is not directory. \"\"\" if not dir_path . is_dir (): raise ValueError ( \"path {0} must be a directory\" . format ( dir_path )) return _load_query_data_tree ( dir_path , dir_path )","title":"load_query_data_from_dir_path()"},{"location":"reference/query_loaders/#edgeql_queries.query_loaders.load_query_data_from_edgeql","text":"Load queries from string. Parameters: Name Type Description Default edgeql str edgeql string that contains queries to be parsed. required Returns: Type Description List[edgeql_queries.models.Query] List of queries that will be used later by container for them. Source code in edgeql_queries/query_loaders.py def load_query_data_from_edgeql ( edgeql : str ) -> List [ Query ]: \"\"\"Load queries from string. Arguments: edgeql: edgeql string that contains queries to be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. \"\"\" query_data = [] matches_iter = _iter_pairs ( QUERY_DEFINITION_PATTERN . finditer ( edgeql )) for ( start_match , end_match ) in matches_iter : if end_match is not None : end_position = end_match . start () else : end_position = len ( edgeql ) query_data . append ( parse_query_from_string ( start_match . groups ()[ 0 ], edgeql [ start_match . end () : end_position ], ), ) return query_data","title":"load_query_data_from_edgeql()"},{"location":"reference/query_loaders/#edgeql_queries.query_loaders.load_query_data_from_file","text":"Load queries from esdl file. Parameters: Name Type Description Default file_path Path path to file with queries to be parsed. required Returns: Type Description List[edgeql_queries.models.Query] List of queries that will be used later by container for them. Exceptions: Type Description FileNotFoundError if failed to open file. # noqa: DAR402 Source code in edgeql_queries/query_loaders.py def load_query_data_from_file ( file_path : Path ) -> List [ Query ]: \"\"\"Load queries from esdl file. Arguments: file_path: path to file with queries to be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Raises: FileNotFoundError: if failed to open file. # noqa: DAR402 \"\"\" with open ( file_path ) as edgeql_file : return load_query_data_from_edgeql ( edgeql_file . read ())","title":"load_query_data_from_file()"},{"location":"reference/contib/aiosql/adapters/","text":"Definition for aiosql compatible adapters. Adapters here aren't \"real\" adapters, that can execute queries but just dummy classes with compatible interface. EdgeQLAsyncAdapter \u00b6 Dummy adapter for async driver. Source code in edgeql_queries/contrib/aiosql/adapters.py class EdgeQLAsyncAdapter : \"\"\"Dummy adapter for async driver.\"\"\" is_aio_driver = True EdgeQLSyncAdapter \u00b6 Dummy adapter for sync driver. Source code in edgeql_queries/contrib/aiosql/adapters.py class EdgeQLSyncAdapter : \"\"\"Dummy adapter for sync driver.\"\"\" is_aio_driver = False","title":"Adapters"},{"location":"reference/contib/aiosql/adapters/#edgeql_queries.contrib.aiosql.adapters.EdgeQLAsyncAdapter","text":"Dummy adapter for async driver. Source code in edgeql_queries/contrib/aiosql/adapters.py class EdgeQLAsyncAdapter : \"\"\"Dummy adapter for async driver.\"\"\" is_aio_driver = True","title":"EdgeQLAsyncAdapter"},{"location":"reference/contib/aiosql/adapters/#edgeql_queries.contrib.aiosql.adapters.EdgeQLSyncAdapter","text":"Dummy adapter for sync driver. Source code in edgeql_queries/contrib/aiosql/adapters.py class EdgeQLSyncAdapter : \"\"\"Dummy adapter for sync driver.\"\"\" is_aio_driver = False","title":"EdgeQLSyncAdapter"},{"location":"reference/contib/aiosql/queries/","text":"Definition for aiosql compatible queries. EdgeQLQueries \u00b6 Queries that are compatible with aiosql. Source code in edgeql_queries/contrib/aiosql/queries.py class EdgeQLQueries : \"\"\"Queries that are compatible with aiosql.\"\"\" def __init__ ( self , adapter : Union [ EdgeQLSyncAdapter , EdgeQLAsyncAdapter ]) -> None : \"\"\"Init queries. Arguments: adapter: adapter for aiosql with `is_aio_driver` field. \"\"\" self . _use_async = adapter . is_aio_driver def load_from_list ( self , queries : List [ Query ]) -> eq_queries . Queries : \"\"\"Load list of queries. Arguments: queries: list of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_list ( eq_queries . Queries ( self . _use_async ), queries ) def load_from_tree ( self , queries_tree : QueriesTree ) -> eq_queries . Queries : \"\"\"Load queries tree. Arguments: queries_tree: tree of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_tree ( eq_queries . Queries ( self . _use_async ), queries_tree , ) __init__ ( self , adapter ) special \u00b6 Init queries. Parameters: Name Type Description Default adapter Union[edgeql_queries.contrib.aiosql.adapters.EdgeQLSyncAdapter, edgeql_queries.contrib.aiosql.adapters.EdgeQLAsyncAdapter] adapter for aiosql with is_aio_driver field. required Source code in edgeql_queries/contrib/aiosql/queries.py def __init__ ( self , adapter : Union [ EdgeQLSyncAdapter , EdgeQLAsyncAdapter ]) -> None : \"\"\"Init queries. Arguments: adapter: adapter for aiosql with `is_aio_driver` field. \"\"\" self . _use_async = adapter . is_aio_driver load_from_list ( self , queries ) \u00b6 Load list of queries. Parameters: Name Type Description Default queries List[edgeql_queries.models.Query] list of queries that should be used for creating executors for them. required Returns: Type Description Queries Built collection of queries with binded executors. Source code in edgeql_queries/contrib/aiosql/queries.py def load_from_list ( self , queries : List [ Query ]) -> eq_queries . Queries : \"\"\"Load list of queries. Arguments: queries: list of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_list ( eq_queries . Queries ( self . _use_async ), queries ) load_from_tree ( self , queries_tree ) \u00b6 Load queries tree. Parameters: Name Type Description Default queries_tree Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] tree of queries that should be used for creating executors for them. required Returns: Type Description Queries Built collection of queries with binded executors. Source code in edgeql_queries/contrib/aiosql/queries.py def load_from_tree ( self , queries_tree : QueriesTree ) -> eq_queries . Queries : \"\"\"Load queries tree. Arguments: queries_tree: tree of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_tree ( eq_queries . Queries ( self . _use_async ), queries_tree , )","title":"Queries"},{"location":"reference/contib/aiosql/queries/#edgeql_queries.contrib.aiosql.queries.EdgeQLQueries","text":"Queries that are compatible with aiosql. Source code in edgeql_queries/contrib/aiosql/queries.py class EdgeQLQueries : \"\"\"Queries that are compatible with aiosql.\"\"\" def __init__ ( self , adapter : Union [ EdgeQLSyncAdapter , EdgeQLAsyncAdapter ]) -> None : \"\"\"Init queries. Arguments: adapter: adapter for aiosql with `is_aio_driver` field. \"\"\" self . _use_async = adapter . is_aio_driver def load_from_list ( self , queries : List [ Query ]) -> eq_queries . Queries : \"\"\"Load list of queries. Arguments: queries: list of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_list ( eq_queries . Queries ( self . _use_async ), queries ) def load_from_tree ( self , queries_tree : QueriesTree ) -> eq_queries . Queries : \"\"\"Load queries tree. Arguments: queries_tree: tree of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_tree ( eq_queries . Queries ( self . _use_async ), queries_tree , )","title":"EdgeQLQueries"},{"location":"reference/contib/aiosql/queries/#edgeql_queries.contrib.aiosql.queries.EdgeQLQueries.__init__","text":"Init queries. Parameters: Name Type Description Default adapter Union[edgeql_queries.contrib.aiosql.adapters.EdgeQLSyncAdapter, edgeql_queries.contrib.aiosql.adapters.EdgeQLAsyncAdapter] adapter for aiosql with is_aio_driver field. required Source code in edgeql_queries/contrib/aiosql/queries.py def __init__ ( self , adapter : Union [ EdgeQLSyncAdapter , EdgeQLAsyncAdapter ]) -> None : \"\"\"Init queries. Arguments: adapter: adapter for aiosql with `is_aio_driver` field. \"\"\" self . _use_async = adapter . is_aio_driver","title":"__init__()"},{"location":"reference/contib/aiosql/queries/#edgeql_queries.contrib.aiosql.queries.EdgeQLQueries.load_from_list","text":"Load list of queries. Parameters: Name Type Description Default queries List[edgeql_queries.models.Query] list of queries that should be used for creating executors for them. required Returns: Type Description Queries Built collection of queries with binded executors. Source code in edgeql_queries/contrib/aiosql/queries.py def load_from_list ( self , queries : List [ Query ]) -> eq_queries . Queries : \"\"\"Load list of queries. Arguments: queries: list of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_list ( eq_queries . Queries ( self . _use_async ), queries )","title":"load_from_list()"},{"location":"reference/contib/aiosql/queries/#edgeql_queries.contrib.aiosql.queries.EdgeQLQueries.load_from_tree","text":"Load queries tree. Parameters: Name Type Description Default queries_tree Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] tree of queries that should be used for creating executors for them. required Returns: Type Description Queries Built collection of queries with binded executors. Source code in edgeql_queries/contrib/aiosql/queries.py def load_from_tree ( self , queries_tree : QueriesTree ) -> eq_queries . Queries : \"\"\"Load queries tree. Arguments: queries_tree: tree of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_tree ( eq_queries . Queries ( self . _use_async ), queries_tree , )","title":"load_from_tree()"},{"location":"reference/contib/aiosql/query_loaders/","text":"Definition for aiosql compatible query loader. EdgeQLQueryLoader \u00b6 Query loader that is compatible with aiosql. Source code in edgeql_queries/contrib/aiosql/query_loaders.py class EdgeQLQueryLoader : \"\"\"Query loader that is compatible with aiosql.\"\"\" def __init__ ( self , * args : Any ) -> None : \"\"\"Do nothing but be compatible with aiosql query loader. Arguments: args: any args that will be used for initializaton by aiosql. \"\"\" def load_query_data_from_sql ( self , edgeql : str ) -> List [ Query ]: \"\"\"Load queries from EdgeQL string. Arguments: edgeql: EdgeQL string to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_edgeql ( edgeql ) def load_query_data_from_file ( self , file_path : Path ) -> List [ Query ]: \"\"\"Load queries from single file. Arguments: file_path: path to EdgeQL file to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_file ( file_path ) def load_query_data_from_dir_path ( self , dir_path : Path ) -> QueriesTree : \"\"\"Load queries from directory. Arguments: dir_path: path to dir with EdgeQL files to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_dir_path ( dir_path ) __init__ ( self , * args ) special \u00b6 Do nothing but be compatible with aiosql query loader. Parameters: Name Type Description Default args Any any args that will be used for initializaton by aiosql. () Source code in edgeql_queries/contrib/aiosql/query_loaders.py def __init__ ( self , * args : Any ) -> None : \"\"\"Do nothing but be compatible with aiosql query loader. Arguments: args: any args that will be used for initializaton by aiosql. \"\"\" load_query_data_from_dir_path ( self , dir_path ) \u00b6 Load queries from directory. Parameters: Name Type Description Default dir_path Path path to dir with EdgeQL files to create a new collection of queries. required Returns: Type Description Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py def load_query_data_from_dir_path ( self , dir_path : Path ) -> QueriesTree : \"\"\"Load queries from directory. Arguments: dir_path: path to dir with EdgeQL files to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_dir_path ( dir_path ) load_query_data_from_file ( self , file_path ) \u00b6 Load queries from single file. Parameters: Name Type Description Default file_path Path path to EdgeQL file to create a new collection of queries. required Returns: Type Description List[edgeql_queries.models.Query] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py def load_query_data_from_file ( self , file_path : Path ) -> List [ Query ]: \"\"\"Load queries from single file. Arguments: file_path: path to EdgeQL file to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_file ( file_path ) load_query_data_from_sql ( self , edgeql ) \u00b6 Load queries from EdgeQL string. Parameters: Name Type Description Default edgeql str EdgeQL string to create a new collection of queries. required Returns: Type Description List[edgeql_queries.models.Query] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py def load_query_data_from_sql ( self , edgeql : str ) -> List [ Query ]: \"\"\"Load queries from EdgeQL string. Arguments: edgeql: EdgeQL string to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_edgeql ( edgeql )","title":"Query loaders"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders.EdgeQLQueryLoader","text":"Query loader that is compatible with aiosql. Source code in edgeql_queries/contrib/aiosql/query_loaders.py class EdgeQLQueryLoader : \"\"\"Query loader that is compatible with aiosql.\"\"\" def __init__ ( self , * args : Any ) -> None : \"\"\"Do nothing but be compatible with aiosql query loader. Arguments: args: any args that will be used for initializaton by aiosql. \"\"\" def load_query_data_from_sql ( self , edgeql : str ) -> List [ Query ]: \"\"\"Load queries from EdgeQL string. Arguments: edgeql: EdgeQL string to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_edgeql ( edgeql ) def load_query_data_from_file ( self , file_path : Path ) -> List [ Query ]: \"\"\"Load queries from single file. Arguments: file_path: path to EdgeQL file to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_file ( file_path ) def load_query_data_from_dir_path ( self , dir_path : Path ) -> QueriesTree : \"\"\"Load queries from directory. Arguments: dir_path: path to dir with EdgeQL files to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_dir_path ( dir_path )","title":"EdgeQLQueryLoader"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders.EdgeQLQueryLoader.__init__","text":"Do nothing but be compatible with aiosql query loader. Parameters: Name Type Description Default args Any any args that will be used for initializaton by aiosql. () Source code in edgeql_queries/contrib/aiosql/query_loaders.py def __init__ ( self , * args : Any ) -> None : \"\"\"Do nothing but be compatible with aiosql query loader. Arguments: args: any args that will be used for initializaton by aiosql. \"\"\"","title":"__init__()"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders.EdgeQLQueryLoader.load_query_data_from_dir_path","text":"Load queries from directory. Parameters: Name Type Description Default dir_path Path path to dir with EdgeQL files to create a new collection of queries. required Returns: Type Description Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py def load_query_data_from_dir_path ( self , dir_path : Path ) -> QueriesTree : \"\"\"Load queries from directory. Arguments: dir_path: path to dir with EdgeQL files to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_dir_path ( dir_path )","title":"load_query_data_from_dir_path()"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders.EdgeQLQueryLoader.load_query_data_from_file","text":"Load queries from single file. Parameters: Name Type Description Default file_path Path path to EdgeQL file to create a new collection of queries. required Returns: Type Description List[edgeql_queries.models.Query] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py def load_query_data_from_file ( self , file_path : Path ) -> List [ Query ]: \"\"\"Load queries from single file. Arguments: file_path: path to EdgeQL file to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_file ( file_path )","title":"load_query_data_from_file()"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders.EdgeQLQueryLoader.load_query_data_from_sql","text":"Load queries from EdgeQL string. Parameters: Name Type Description Default edgeql str EdgeQL string to create a new collection of queries. required Returns: Type Description List[edgeql_queries.models.Query] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py def load_query_data_from_sql ( self , edgeql : str ) -> List [ Query ]: \"\"\"Load queries from EdgeQL string. Arguments: edgeql: EdgeQL string to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_edgeql ( edgeql )","title":"load_query_data_from_sql()"}]}