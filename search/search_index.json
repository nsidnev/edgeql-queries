{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"edgeql-queries Simple EdgeQL in Python. Introduction \u00b6 edgeql-queries is a library that allows you to store your EdgeQL queries in separate files and then execute them like normal Python functions. This way you can control versions of the queries code, as with any other languages, but use it in Python applications. Information This library may become less useful after the release of the query builder for EdgeDB, but who knows \u00af\\_(\u30c4)_/\u00af . Requirements \u00b6 edgeql-queries requires only the EdgeDB driver for Python . Installation \u00b6 You can install edgeql-queries using pip : pip install edgeql-queries Or if you are using poetry : poetry install edgeql-queries Example \u00b6 There is a more complex example based on the EdgeDB tutorial in the example folder in the repository. You can look there to see more features. Here is a simplified version: Let's assume that we have the following schema in our already configured database: module default { type Person { required property first_name -> str ; required property last_name -> str ; } } We'll write our queries in the queries.edgeql : # name: select-users-by-last-name # Select all users that have same last name. SELECT Person { first_name, } FILTER .last_name = < str > $last_name # name: select-user-by-id! # Select single user's last name by it's id. SELECT Person { last_name } FILTER .id = < uuid > $user_id # name: create-keanu-reeves* # Create new user. INSERT Person { first_name := \"Keanu\" , last_name := \"Reeves\" , } Finally, we'll write our Python code: import edgedb import edgeql_queries queries = edgeql_queries . from_path ( \"./queries.edgeql\" , async_driver = False ) conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) # create Keanu queries . create_keanu_reeves ( conn ) # query all Keanu from database keanu_set = queries . select_users_by_last_name ( conn , last_name = \"Reeves\" ) for keanu in keanu_set : keanu_from_db = queries . select_user_by_id ( conn , user_id = keanu . id ) print ( f \" { keanu . first_name } { keanu_from_db . last_name } : { keanu_from_db . id } \" ) Credits \u00b6 This project is inspired by aiosql project and is based on it's source code. License \u00b6 This project is licensed under the terms of the FreeBSD license.","title":"Introduction"},{"location":"#introduction","text":"edgeql-queries is a library that allows you to store your EdgeQL queries in separate files and then execute them like normal Python functions. This way you can control versions of the queries code, as with any other languages, but use it in Python applications. Information This library may become less useful after the release of the query builder for EdgeDB, but who knows \u00af\\_(\u30c4)_/\u00af .","title":"Introduction"},{"location":"#requirements","text":"edgeql-queries requires only the EdgeDB driver for Python .","title":"Requirements"},{"location":"#installation","text":"You can install edgeql-queries using pip : pip install edgeql-queries Or if you are using poetry : poetry install edgeql-queries","title":"Installation"},{"location":"#example","text":"There is a more complex example based on the EdgeDB tutorial in the example folder in the repository. You can look there to see more features. Here is a simplified version: Let's assume that we have the following schema in our already configured database: module default { type Person { required property first_name -> str ; required property last_name -> str ; } } We'll write our queries in the queries.edgeql : # name: select-users-by-last-name # Select all users that have same last name. SELECT Person { first_name, } FILTER .last_name = < str > $last_name # name: select-user-by-id! # Select single user's last name by it's id. SELECT Person { last_name } FILTER .id = < uuid > $user_id # name: create-keanu-reeves* # Create new user. INSERT Person { first_name := \"Keanu\" , last_name := \"Reeves\" , } Finally, we'll write our Python code: import edgedb import edgeql_queries queries = edgeql_queries . from_path ( \"./queries.edgeql\" , async_driver = False ) conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) # create Keanu queries . create_keanu_reeves ( conn ) # query all Keanu from database keanu_set = queries . select_users_by_last_name ( conn , last_name = \"Reeves\" ) for keanu in keanu_set : keanu_from_db = queries . select_user_by_id ( conn , user_id = keanu . id ) print ( f \" { keanu . first_name } { keanu_from_db . last_name } : { keanu_from_db . id } \" )","title":"Example"},{"location":"#credits","text":"This project is inspired by aiosql project and is based on it's source code.","title":"Credits"},{"location":"#license","text":"This project is licensed under the terms of the FreeBSD license.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] \u00b6 Compare with 0.0.3 Changed \u00b6 Change queries parsing allowing arbitrary comments in queries. [0.0.3] - 2020-08-14 \u00b6 Compare with 0.0.2 Added \u00b6 Add support for aiosql via custom adapter. Changed \u00b6 Update netlify-action to update existing message with docs deployment instead of spaming with new one. Change the license from MIT to FreeBSD as in the parent projects( aiosql and anosql ). [0.0.2] - 2020-08-11 \u00b6 Compare with 0.0.1 Added \u00b6 Add support for positional arguments. Add py.typed file for providing types information for type checkers. Update edgedb-python to 0.9.0 . Update CI to use new EdgeDB alpha release. Check support for pools. Fix typos and examples in docs. Changed \u00b6 Move to nox from scripts. [0.0.1] - 2020-04-09 \u00b6 Compare with first commit Added \u00b6 First release.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"Compare with 0.0.3","title":"[Unreleased]"},{"location":"changelog/#changed","text":"Change queries parsing allowing arbitrary comments in queries.","title":"Changed"},{"location":"changelog/#003-2020-08-14","text":"Compare with 0.0.2","title":"[0.0.3] - 2020-08-14"},{"location":"changelog/#added","text":"Add support for aiosql via custom adapter.","title":"Added"},{"location":"changelog/#changed_1","text":"Update netlify-action to update existing message with docs deployment instead of spaming with new one. Change the license from MIT to FreeBSD as in the parent projects( aiosql and anosql ).","title":"Changed"},{"location":"changelog/#002-2020-08-11","text":"Compare with 0.0.1","title":"[0.0.2] - 2020-08-11"},{"location":"changelog/#added_1","text":"Add support for positional arguments. Add py.typed file for providing types information for type checkers. Update edgedb-python to 0.9.0 . Update CI to use new EdgeDB alpha release. Check support for pools. Fix typos and examples in docs.","title":"Added"},{"location":"changelog/#changed_2","text":"Move to nox from scripts.","title":"Changed"},{"location":"changelog/#001-2020-04-09","text":"Compare with first commit","title":"[0.0.1] - 2020-04-09"},{"location":"changelog/#added_2","text":"First release.","title":"Added"},{"location":"grouping-queries/","text":"If you pass a single file or directory without nesting in the [from_path][edgeql_queries.loaders.from_path] function, then your EdgeQL queries will be placed directly in the returned [queries][edgeql_queries.queries.Queries] as attributes. For example, if there is a single file with queries named queries.edgeql : # name: create-new-person! # Create new person with passing first and lst names. INSERT Person { first_name := < str > $first_name , last_name := < str > $last_name , } # name: select-movies-by-year # Get movies by release year. SELECT Movie { title, year, director: { last_name, }, actors: { first_name, last_name, } } FILTER .year = < int64 > $year or a directory named edgeql with 2 edgeql/persons.edgeql and edgeql/movies.edgeql files: edgeql/persons.edgeql : # name: create-new-person! # Create new person with passing first and lst names. INSERT Person { first_name := < str > $first_name , last_name := < str > $last_name , } edgeql/movies.edgeql # name: select-movies-by-year # Get movies by release year. SELECT Movie { title, year, director: { last_name, }, actors: { first_name, last_name, } } FILTER .year = < int64 > $year Then working python code will look like this: import edgedb import edgeql_queries # or edgeql_queries.from_path('./edgeql', async_driver=False) for directory queries = edgeql_queries . from_path ( \"./queries.edgeql\" , async_driver = False ) conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) queries . create_new_person ( conn , first_name = \"Keanu\" , last_name = \"Reeves\" ) But if you pass a directory with subdirectories that contain .edgeql files, then these queries will be placed as subqueries in the returned queries. For example, if there is the following directory tree: edgeql/ \u251c\u2500\u2500 persons \u2502 \u2514\u2500\u2500 persons.edgeql \u2514\u2500\u2500 movies \u2514\u2500\u2500 movies.edgeql Then edgeql-queries will generate 2 subgroups for the returned queries, and the working code will look like this: import edgedb import edgeql_queries queries = edgeql_queries . from_path ( \"./edgeql\" , async_driver = False ) conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) movies = queries . movies . select_movies_by_year ( conn , year = 2020 ) print ( movies )","title":"Grouping Queries"},{"location":"improve-typing/","text":"Since [Queries][edgeql_queries.queries.Queries] are dynamically generated at runtime, they cannot provide type hints for your editors/IDEs or linters. But you can write typings for your queries yourself. queries.edgeql : # name: select-users-by-last-name # Select all users that have same last name. SELECT Person { first_name, last_name, } FILTER .last_name = < str > $last_name # name: select-user-by-id! # Select single user's last name by it's id. SELECT Person { first_name, last_name } FILTER .id = < uuid > $user_id # name: create-keanu-reeves* # Create new user. INSERT Person { first_name := \"Keanu\" , last_name := \"Reeves\" , } And python code: from typing import Protocol , Set , Union , cast from uuid import UUID import edgedb import edgeql_queries EdgeDBFetcher = Union [ edgedb . AsyncIOPool , edgedb . AsyncIOConnection ] class Person ( Protocol ): id : UUID first_name : str last_name : str class Queries : async def select_users_by_last_name ( self , fetcher : EdgeDBFetcher , last_name : str , ) -> Set [ Person ]: ... async def select_user_by_id ( self , fetcher : EdgeDBFetcher , user_id : UUID ,) -> Person : ... async def create_keanu_reeves ( self , fetcher : EdgeDBFetcher ) -> None : ... queries = cast ( Queries , edgeql_queries . from_path ( \"./queries.edgeql\" ))","title":"Improve Typing Of Queries"},{"location":"contrib/aiosql/","text":"edgeql-queries provides an adapter for aiosql . Using it is quite simple and with its help, you can use aiosql and edgeql-queries together, while still being able to replace it with another adapter. You can use, for example, PostgreSQL with EdgeDB, since EdgeDB is based on PostgreSQL and it is possible that in the future, access to the PostgreSQL server that is used by EdgeDB will be open. queries.edgeql : # name: select-movie-by-id! # Get movie by id. SELECT Movie { title, year, director: { user_id, }, } FILTER .id = < uuid > $0 LIMIT 1 ; queries.sql : -- name: get-username-by-id^ -- Get username by user's ID. SELECT username FROM users WHERE id = : id ; And python code: import asyncio from uuid import UUID import aiosql import asyncpg import edgedb from edgeql_queries.contrib import aiosql as eq_aiosql MOVIE_ID = UUID ( \"6000323c-cc31-474d-828b-dadaa6404674\" ) pg_queries = aiosql . from_path ( \"./aiosql_contrib.sql\" , \"asyncpg\" ) edb_queries = aiosql . from_path ( \"./aiosql_contrib.edgeql\" , driver_adapter = eq_aiosql . EdgeQLAsyncAdapter , loader_cls = eq_aiosql . EdgeQLQueryLoader , queries_cls = eq_aiosql . EdgeQLQueries , ) async def main (): edb_conn = await edgedb . async_connect ( \"edgedb://edgedb@localhost/edgedb\" ) pg_conn = await asyncpg . connect ( \"postgres://postgres@localhost/postgres\" ) movie = await edb_queries . select_movie_by_id ( edb_conn , MOVIE_ID ) user_record = await pg_queries . get_username_by_id ( pg_conn , id = movie . director . user_id , ) print ( f \"Director's name: { user_record [ 0 ] } \" ) asyncio . run ( main ())","title":"aiosql"},{"location":"queries-definition/queries-definition-intro/","text":"An EdgeQL query that can be parsed using edgeql-queries has some limitations: Query must be named. The query's name must not contain characters that cannot be used in Python identifiers ( except for the - character, since it will be converted to _ ). They can have special characters after their names, which will change the way these queries are executed: * : query will be executed as a script using the .execute method from the driver. ! : query will always return a single object, and therefore such query will be executed using the .query_one method from the driver. empty: a regular query that returns a set of objects and will be executed by the .query method from the driver. Names \u00b6 The query name must be a valid Python identifier, but it can contain a - character, which will be converted to _ . An example of valid query names: Example 1: # name: get-persons-by-age SELECT Person { first_name } FILTER .age = < int64 > $age Example 2: # name: get-person-by-full-name! SELECT Person { first_name, last_name, age } FILTER .first_name = < str > $first_name AND .last_name = < str > $last_name Example 3: # name: create-test-users* FOR x IN { (name := 'Alice' , theme := 'fire' ), (name := 'Bob' , theme := 'rain' ), (name := 'Carol' , theme := 'clouds' ), (name := 'Dave' , theme := 'forest' ) } UNION ( INSERT User { name := x.name, theme := x.theme, } )","title":"Queries Definition"},{"location":"queries-definition/queries-definition-intro/#names","text":"The query name must be a valid Python identifier, but it can contain a - character, which will be converted to _ . An example of valid query names: Example 1: # name: get-persons-by-age SELECT Person { first_name } FILTER .age = < int64 > $age Example 2: # name: get-person-by-full-name! SELECT Person { first_name, last_name, age } FILTER .first_name = < str > $first_name AND .last_name = < str > $last_name Example 3: # name: create-test-users* FOR x IN { (name := 'Alice' , theme := 'fire' ), (name := 'Bob' , theme := 'rain' ), (name := 'Carol' , theme := 'clouds' ), (name := 'Dave' , theme := 'forest' ) } UNION ( INSERT User { name := x.name, theme := x.theme, } )","title":"Names"},{"location":"queries-definition/operation-types/execute/","text":"Just Execute Query With * : \u00b6 If you are not using the result of the query, you can mark it * . This will tell edgeql-queries to use the .execute driver method. This may be useful for migration, for example. Information This is just an example. After the release of migration support directly in EdgeDB, this example will probably be useless. For example, there are the following migrations for our scheme: edgeql/migrations/migrtaion_0000_default.edgeql : # name: migration_0000_default* CREATE MIGRATION migration_0000_default TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } } }; COMMIT MIGRATION migration_0000_default; edgeql/migrations/migration_0001_add_movies.edgeql : # name: migration_0001_add_movies* CREATE MIGRATION migration_0001_add_movies TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } type Movie { required property title -> str ; # the year of release property year -> int64 ; required link director -> Person; multi link actors -> Person; } } }; COMMIT MIGRATION migration_0001_add_movies; edgeql/migrations/migration_0002_add_min_year_contraint.edgeql : # name: migration_0002_add_min_year_constraint* CREATE MIGRATION migration_0002_add_min_year_constraint TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } type Movie { required property title -> str ; # the year of release property year -> int64 { constraint min_value ( 1888 ); }; required link director -> Person; multi link actors -> Person; } } }; COMMIT MIGRATION migration_0002_add_min_year_constraint; We can migrate it using the following code: migrate.py : import edgedb from edgeql_queries import from_path queries = from_path ( \"./edgeql\" , async_driver = False ) conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) for migration_query in queries . migrations . available_queries : print ( f \"migrate: { migration_query . name } \" ) with conn . transaction (): queries . migrations . get_executor ( migration_query . name )( conn )","title":"Execute Query"},{"location":"queries-definition/operation-types/execute/#just-execute-query-with","text":"If you are not using the result of the query, you can mark it * . This will tell edgeql-queries to use the .execute driver method. This may be useful for migration, for example. Information This is just an example. After the release of migration support directly in EdgeDB, this example will probably be useless. For example, there are the following migrations for our scheme: edgeql/migrations/migrtaion_0000_default.edgeql : # name: migration_0000_default* CREATE MIGRATION migration_0000_default TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } } }; COMMIT MIGRATION migration_0000_default; edgeql/migrations/migration_0001_add_movies.edgeql : # name: migration_0001_add_movies* CREATE MIGRATION migration_0001_add_movies TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } type Movie { required property title -> str ; # the year of release property year -> int64 ; required link director -> Person; multi link actors -> Person; } } }; COMMIT MIGRATION migration_0001_add_movies; edgeql/migrations/migration_0002_add_min_year_contraint.edgeql : # name: migration_0002_add_min_year_constraint* CREATE MIGRATION migration_0002_add_min_year_constraint TO { module default { type Person { required property first_name -> str ; required property last_name -> str ; } type Movie { required property title -> str ; # the year of release property year -> int64 { constraint min_value ( 1888 ); }; required link director -> Person; multi link actors -> Person; } } }; COMMIT MIGRATION migration_0002_add_min_year_constraint; We can migrate it using the following code: migrate.py : import edgedb from edgeql_queries import from_path queries = from_path ( \"./edgeql\" , async_driver = False ) conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) for migration_query in queries . migrations . available_queries : print ( f \"migrate: { migration_query . name } \" ) with conn . transaction (): queries . migrations . get_executor ( migration_query . name )( conn )","title":"Just Execute Query With *:"},{"location":"queries-definition/operation-types/select-set/","text":"If you just need to get the query results, do not write anything after the name. Such query will use .fetchall from the driver: queries.edgeql : # name: select-all-users SELECT Person { first_name, last_name, age } And python code: import edgedb from edgeql_queries import from_path conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) queries = from_path ( \"./queries.edgeql\" , async_driver = False ) users = queries . select_all_users ( conn )","title":"Query Set Of Objects"},{"location":"queries-definition/operation-types/select-single/","text":"Query Single Object With ! : \u00b6 If you know that your query will return a single object, you can put ! at the end of its name and then edgeql-queries will use the .fetchone method from driver for this query. For example, here is the code that directly uses the python driver: import edgedb conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) user = conn . fetchone ( \"\"\" SELECT Person { username } FILTER .ip = <str>$user_ip LIMIT 1 \"\"\" , user_ip = \"37.204.79.75\" , ) And this is the code that uses edgeql-queries : queries.edgeql : # name: select-person-by-ip! # Query user by IP. SELECT Person { username } FILTER .ip = < str > $user_ip LIMIT 1 And python code: import edgedb from edgeql_queries import from_path conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) queries = from_path ( \"./queries.edgeql\" , async_driver = False ) user = queries . select_person_by_ip ( conn , user_ip = \"37.204.79.75\" )","title":"Query Single Object"},{"location":"queries-definition/operation-types/select-single/#query-single-object-with","text":"If you know that your query will return a single object, you can put ! at the end of its name and then edgeql-queries will use the .fetchone method from driver for this query. For example, here is the code that directly uses the python driver: import edgedb conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) user = conn . fetchone ( \"\"\" SELECT Person { username } FILTER .ip = <str>$user_ip LIMIT 1 \"\"\" , user_ip = \"37.204.79.75\" , ) And this is the code that uses edgeql-queries : queries.edgeql : # name: select-person-by-ip! # Query user by IP. SELECT Person { username } FILTER .ip = < str > $user_ip LIMIT 1 And python code: import edgedb from edgeql_queries import from_path conn = edgedb . connect ( \"edgedb://edgedb@localhost/edgedb\" ) queries = from_path ( \"./queries.edgeql\" , async_driver = False ) user = queries . select_person_by_ip ( conn , user_ip = \"37.204.79.75\" )","title":"Query Single Object With !:"},{"location":"reference/exceptions/","text":"\u00b6 Definition for error that may be raised by this library. EdgeQLLoadError \u00b6 Error that raised if there is an error to load queries. EdgeQLParsingError \u00b6 Error that raised if there is an error in parsing query.","title":"Errors"},{"location":"reference/exceptions/#edgeql_queries.exceptions","text":"Definition for error that may be raised by this library.","title":"edgeql_queries.exceptions"},{"location":"reference/exceptions/#edgeql_queries.exceptions.EdgeQLLoadError","text":"Error that raised if there is an error to load queries.","title":"EdgeQLLoadError"},{"location":"reference/exceptions/#edgeql_queries.exceptions.EdgeQLParsingError","text":"Error that raised if there is an error in parsing query.","title":"EdgeQLParsingError"},{"location":"reference/executors/","text":"\u00b6 Definition for query executors creators. async_executor \u00b6 Definition for creator of async executors. create_async_executor ( query ) \u00b6 Create async executor for query. Parameters: Name Type Description Default query Query query for which executor should be created. required Returns: Type Description Callable Created async executor. Source code in edgeql_queries/executors/async_executor.py 40 41 42 43 44 45 46 47 48 49 50 def create_async_executor ( query : Query ) -> Callable : \"\"\"Create async executor for query. Arguments: query: query for which executor should be created. Returns: Created async executor. \"\"\" executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] return partial ( executor , query ) sync_executor \u00b6 Definition for creator of sync executors. create_sync_executor ( query ) \u00b6 Create sync executor for query. Parameters: Name Type Description Default query Query query for which executor should be created. required Returns: Type Description Callable Created sync executor. Source code in edgeql_queries/executors/sync_executor.py 44 45 46 47 48 49 50 51 52 53 54 def create_sync_executor ( query : Query ) -> Callable : \"\"\"Create sync executor for query. Arguments: query: query for which executor should be created. Returns: Created sync executor. \"\"\" executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] return partial ( executor , query ) \u00b6 Definition for creator of async executors. create_async_executor ( query ) \u00b6 Create async executor for query. Parameters: Name Type Description Default query Query query for which executor should be created. required Returns: Type Description Callable Created async executor. Source code in edgeql_queries/executors/async_executor.py 40 41 42 43 44 45 46 47 48 49 50 def create_async_executor ( query : Query ) -> Callable : \"\"\"Create async executor for query. Arguments: query: query for which executor should be created. Returns: Created async executor. \"\"\" executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] return partial ( executor , query ) \u00b6 Definition for creator of sync executors. create_sync_executor ( query ) \u00b6 Create sync executor for query. Parameters: Name Type Description Default query Query query for which executor should be created. required Returns: Type Description Callable Created sync executor. Source code in edgeql_queries/executors/sync_executor.py 44 45 46 47 48 49 50 51 52 53 54 def create_sync_executor ( query : Query ) -> Callable : \"\"\"Create sync executor for query. Arguments: query: query for which executor should be created. Returns: Created sync executor. \"\"\" executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] return partial ( executor , query )","title":"Executors"},{"location":"reference/executors/#edgeql_queries.executors","text":"Definition for query executors creators.","title":"edgeql_queries.executors"},{"location":"reference/executors/#edgeql_queries.executors.async_executor","text":"Definition for creator of async executors.","title":"async_executor"},{"location":"reference/executors/#edgeql_queries.executors.async_executor.create_async_executor","text":"Create async executor for query. Parameters: Name Type Description Default query Query query for which executor should be created. required Returns: Type Description Callable Created async executor. Source code in edgeql_queries/executors/async_executor.py 40 41 42 43 44 45 46 47 48 49 50 def create_async_executor ( query : Query ) -> Callable : \"\"\"Create async executor for query. Arguments: query: query for which executor should be created. Returns: Created async executor. \"\"\" executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] return partial ( executor , query )","title":"create_async_executor()"},{"location":"reference/executors/#edgeql_queries.executors.sync_executor","text":"Definition for creator of sync executors.","title":"sync_executor"},{"location":"reference/executors/#edgeql_queries.executors.sync_executor.create_sync_executor","text":"Create sync executor for query. Parameters: Name Type Description Default query Query query for which executor should be created. required Returns: Type Description Callable Created sync executor. Source code in edgeql_queries/executors/sync_executor.py 44 45 46 47 48 49 50 51 52 53 54 def create_sync_executor ( query : Query ) -> Callable : \"\"\"Create sync executor for query. Arguments: query: query for which executor should be created. Returns: Created sync executor. \"\"\" executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] return partial ( executor , query )","title":"create_sync_executor()"},{"location":"reference/executors/#edgeql_queries.executors.async_executor","text":"Definition for creator of async executors.","title":"async_executor"},{"location":"reference/executors/#edgeql_queries.executors.async_executor.create_async_executor","text":"Create async executor for query. Parameters: Name Type Description Default query Query query for which executor should be created. required Returns: Type Description Callable Created async executor. Source code in edgeql_queries/executors/async_executor.py 40 41 42 43 44 45 46 47 48 49 50 def create_async_executor ( query : Query ) -> Callable : \"\"\"Create async executor for query. Arguments: query: query for which executor should be created. Returns: Created async executor. \"\"\" executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] return partial ( executor , query )","title":"create_async_executor()"},{"location":"reference/executors/#edgeql_queries.executors.sync_executor","text":"Definition for creator of sync executors.","title":"sync_executor"},{"location":"reference/executors/#edgeql_queries.executors.sync_executor.create_sync_executor","text":"Create sync executor for query. Parameters: Name Type Description Default query Query query for which executor should be created. required Returns: Type Description Callable Created sync executor. Source code in edgeql_queries/executors/sync_executor.py 44 45 46 47 48 49 50 51 52 53 54 def create_sync_executor ( query : Query ) -> Callable : \"\"\"Create sync executor for query. Arguments: query: query for which executor should be created. Returns: Created sync executor. \"\"\" executor = _OPERATION_TO_EXECUTOR [ query . operation_type ] return partial ( executor , query )","title":"create_sync_executor()"},{"location":"reference/loaders/","text":"\u00b6 Definition of loaders for queries. from_path ( edgeql_path , async_driver = True ) \u00b6 Load queries by path to .edgeql file or directory with them. Parameters: Name Type Description Default edgeql_path Union[str, pathlib.Path] path to .edgeql file with queries or directory with queries. required async_driver bool create async executors for using with async driver. True Returns: Type Description Queries Loaded and parsed queries. Exceptions: Type Description EdgeQLLoadError if path to queries does not exist. Source code in edgeql_queries/loaders.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def from_path ( edgeql_path : Union [ str , Path ], async_driver : bool = True ) -> Queries : \"\"\"Load queries by path to `.edgeql` file or directory with them. Arguments: edgeql_path: path to `.edgeql` file with queries or directory with queries. async_driver: create async executors for using with async driver. Returns: Loaded and parsed queries. Raises: EdgeQLLoadError: if path to queries does not exist. \"\"\" path = Path ( edgeql_path ) if not path . exists (): raise EdgeQLLoadError ( \" {0} does not exist\" . format ( path )) queries = Queries ( async_driver ) if path . is_file (): query_data = load_query_data_from_file ( path ) return load_from_list ( queries , query_data ) elif path . is_dir (): query_data_tree = load_query_data_from_dir_path ( path ) return load_from_tree ( queries , query_data_tree ) raise EdgeQLLoadError ( \"edgeql_path must be a directory or file, got {0} \" . format ( edgeql_path ), )","title":"Loaders"},{"location":"reference/loaders/#edgeql_queries.loaders","text":"Definition of loaders for queries.","title":"edgeql_queries.loaders"},{"location":"reference/loaders/#edgeql_queries.loaders.from_path","text":"Load queries by path to .edgeql file or directory with them. Parameters: Name Type Description Default edgeql_path Union[str, pathlib.Path] path to .edgeql file with queries or directory with queries. required async_driver bool create async executors for using with async driver. True Returns: Type Description Queries Loaded and parsed queries. Exceptions: Type Description EdgeQLLoadError if path to queries does not exist. Source code in edgeql_queries/loaders.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def from_path ( edgeql_path : Union [ str , Path ], async_driver : bool = True ) -> Queries : \"\"\"Load queries by path to `.edgeql` file or directory with them. Arguments: edgeql_path: path to `.edgeql` file with queries or directory with queries. async_driver: create async executors for using with async driver. Returns: Loaded and parsed queries. Raises: EdgeQLLoadError: if path to queries does not exist. \"\"\" path = Path ( edgeql_path ) if not path . exists (): raise EdgeQLLoadError ( \" {0} does not exist\" . format ( path )) queries = Queries ( async_driver ) if path . is_file (): query_data = load_query_data_from_file ( path ) return load_from_list ( queries , query_data ) elif path . is_dir (): query_data_tree = load_query_data_from_dir_path ( path ) return load_from_tree ( queries , query_data_tree ) raise EdgeQLLoadError ( \"edgeql_path must be a directory or file, got {0} \" . format ( edgeql_path ), )","title":"from_path()"},{"location":"reference/models/","text":"\u00b6 Definition for main data models used in this library. EdgeQLOperationType \u00b6 Enumeration for operation types for queries. Query dataclass \u00b6 Parsed query. __hash__ ( self ) special \u00b6 Hash query. Hashing is done by query's name. Returns: Type Description int Query's hash. Source code in edgeql_queries/models.py 33 34 35 36 37 38 39 40 41 def __hash__ ( self ) -> int : \"\"\"Hash query. Hashing is done by query's name. Returns: Query's hash. \"\"\" return hash ( self . name ) __repr__ ( self ) special \u00b6 Return raw string representation of query. Returns: Type Description str Raw string representation of query that contains all fields. Source code in edgeql_queries/models.py 51 52 53 54 55 56 57 58 59 def __repr__ ( self ) -> str : \"\"\"Return raw string representation of query. Returns: Raw string representation of query that contains all fields. \"\"\" return \"Query(name: {0!r} , operation_type: {1} , edgeql: {2!r} )\" . format ( self . name , self . operation_type . name , self . edgeql , ) __str__ ( self ) special \u00b6 Return string representation of query. Returns: Type Description str String representation of query that is its name. Source code in edgeql_queries/models.py 43 44 45 46 47 48 49 def __str__ ( self ) -> str : \"\"\"Return string representation of query. Returns: String representation of query that is its name. \"\"\" return self . name","title":"Models"},{"location":"reference/models/#edgeql_queries.models","text":"Definition for main data models used in this library.","title":"edgeql_queries.models"},{"location":"reference/models/#edgeql_queries.models.EdgeQLOperationType","text":"Enumeration for operation types for queries.","title":"EdgeQLOperationType"},{"location":"reference/models/#edgeql_queries.models.Query","text":"Parsed query.","title":"Query"},{"location":"reference/models/#edgeql_queries.models.Query.__hash__","text":"Hash query. Hashing is done by query's name. Returns: Type Description int Query's hash. Source code in edgeql_queries/models.py 33 34 35 36 37 38 39 40 41 def __hash__ ( self ) -> int : \"\"\"Hash query. Hashing is done by query's name. Returns: Query's hash. \"\"\" return hash ( self . name )","title":"__hash__()"},{"location":"reference/models/#edgeql_queries.models.Query.__repr__","text":"Return raw string representation of query. Returns: Type Description str Raw string representation of query that contains all fields. Source code in edgeql_queries/models.py 51 52 53 54 55 56 57 58 59 def __repr__ ( self ) -> str : \"\"\"Return raw string representation of query. Returns: Raw string representation of query that contains all fields. \"\"\" return \"Query(name: {0!r} , operation_type: {1} , edgeql: {2!r} )\" . format ( self . name , self . operation_type . name , self . edgeql , )","title":"__repr__()"},{"location":"reference/models/#edgeql_queries.models.Query.__str__","text":"Return string representation of query. Returns: Type Description str String representation of query that is its name. Source code in edgeql_queries/models.py 43 44 45 46 47 48 49 def __str__ ( self ) -> str : \"\"\"Return string representation of query. Returns: String representation of query that is its name. \"\"\" return self . name","title":"__str__()"},{"location":"reference/parsing/","text":"\u00b6 Definition for parsing functions for queries. Queries that are acceptable by this library should follow some rules: They should be named. Their names should not contain symbols that could not be used in Python identifier( except for - symbol since it would be converted into _ ) They can have special symbols after their names that will change how this queries will be executed: * : query will be executed as script with using .execute method from driver. ! : query will always return a single object and executed with .fetchone method from driver. empty: common query that will return a set of objects and will be executed with .fetchall method from driver. An example query that can be successfuly parsed: # name: select-user-by-username! # Find user by username and return it. SELECT User { username, bio, is_active } FILTER .username = < str > $username LIMIT 1 get_query_name_and_operation ( name ) \u00b6 Return query name and operation from query headers. Parameters: Name Type Description Default name str raw query name with operator from which final name and operation should be extracted. required Returns: Type Description Tuple[str, edgeql_queries.models.EdgeQLOperationType] Query name and [operation type][edgeql_queries.models.EdgeQLOperationType] Exceptions: Type Description EdgeQLParsingError if header is in wrong format or name could not be converted into Python identificator. Source code in edgeql_queries/parsing.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def get_query_name_and_operation ( name : str ) -> Tuple [ str , EdgeQLOperationType ]: \"\"\"Return query name and operation from query headers. Arguments: name: raw query name with operator from which final name and operation should be extracted. Returns: Query name and [operation type][edgeql_queries.models.EdgeQLOperationType] Raises: EdgeQLParsingError: if header is in wrong format or name could not be converted into Python identificator. \"\"\" name = name . replace ( \"-\" , \"_\" ) operation_suffix = \"\" for suffix in _OPERATION_SUFFFIXES_TO_TYPES : # pragma: no branch if name . endswith ( suffix ): operation_suffix = suffix break if operation_suffix : query_name = name [: - len ( operation_suffix )] else : query_name = name if not VALID_QUERY_NAME_PATTERN . match ( query_name ): raise EdgeQLParsingError ( 'name must be convertable to valid python variable, got \" {0} \"' . format ( query_name , ), ) return ( query_name , _OPERATION_SUFFFIXES_TO_TYPES [ operation_suffix ], ) parse_query_from_string ( raw_name , query_body ) \u00b6 Parse EdgeQL query string into [edgeql_queries.models.Query]. Parameters: Name Type Description Default raw_name str query name with operation. required query_body str EdgeQL query. required Returns: Type Description Query [edgeql_queries.models.Query] that will be later added for creating executors. Source code in edgeql_queries/parsing.py 90 91 92 93 94 95 96 97 98 99 100 101 102 def parse_query_from_string ( raw_name : str , query_body : str ) -> Query : \"\"\"Parse EdgeQL query string into [edgeql_queries.models.Query]. Arguments: raw_name: query name with operation. query_body: EdgeQL query. Returns: [edgeql_queries.models.Query] that will be later added for creating executors. \"\"\" query_name , operation_type = get_query_name_and_operation ( raw_name ) return Query ( query_name , operation_type , query_body )","title":"Parsing"},{"location":"reference/parsing/#edgeql_queries.parsing","text":"Definition for parsing functions for queries. Queries that are acceptable by this library should follow some rules: They should be named. Their names should not contain symbols that could not be used in Python identifier( except for - symbol since it would be converted into _ ) They can have special symbols after their names that will change how this queries will be executed: * : query will be executed as script with using .execute method from driver. ! : query will always return a single object and executed with .fetchone method from driver. empty: common query that will return a set of objects and will be executed with .fetchall method from driver. An example query that can be successfuly parsed: # name: select-user-by-username! # Find user by username and return it. SELECT User { username, bio, is_active } FILTER .username = < str > $username LIMIT 1","title":"edgeql_queries.parsing"},{"location":"reference/parsing/#edgeql_queries.parsing.get_query_name_and_operation","text":"Return query name and operation from query headers. Parameters: Name Type Description Default name str raw query name with operator from which final name and operation should be extracted. required Returns: Type Description Tuple[str, edgeql_queries.models.EdgeQLOperationType] Query name and [operation type][edgeql_queries.models.EdgeQLOperationType] Exceptions: Type Description EdgeQLParsingError if header is in wrong format or name could not be converted into Python identificator. Source code in edgeql_queries/parsing.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def get_query_name_and_operation ( name : str ) -> Tuple [ str , EdgeQLOperationType ]: \"\"\"Return query name and operation from query headers. Arguments: name: raw query name with operator from which final name and operation should be extracted. Returns: Query name and [operation type][edgeql_queries.models.EdgeQLOperationType] Raises: EdgeQLParsingError: if header is in wrong format or name could not be converted into Python identificator. \"\"\" name = name . replace ( \"-\" , \"_\" ) operation_suffix = \"\" for suffix in _OPERATION_SUFFFIXES_TO_TYPES : # pragma: no branch if name . endswith ( suffix ): operation_suffix = suffix break if operation_suffix : query_name = name [: - len ( operation_suffix )] else : query_name = name if not VALID_QUERY_NAME_PATTERN . match ( query_name ): raise EdgeQLParsingError ( 'name must be convertable to valid python variable, got \" {0} \"' . format ( query_name , ), ) return ( query_name , _OPERATION_SUFFFIXES_TO_TYPES [ operation_suffix ], )","title":"get_query_name_and_operation()"},{"location":"reference/parsing/#edgeql_queries.parsing.parse_query_from_string","text":"Parse EdgeQL query string into [edgeql_queries.models.Query]. Parameters: Name Type Description Default raw_name str query name with operation. required query_body str EdgeQL query. required Returns: Type Description Query [edgeql_queries.models.Query] that will be later added for creating executors. Source code in edgeql_queries/parsing.py 90 91 92 93 94 95 96 97 98 99 100 101 102 def parse_query_from_string ( raw_name : str , query_body : str ) -> Query : \"\"\"Parse EdgeQL query string into [edgeql_queries.models.Query]. Arguments: raw_name: query name with operation. query_body: EdgeQL query. Returns: [edgeql_queries.models.Query] that will be later added for creating executors. \"\"\" query_name , operation_type = get_query_name_and_operation ( raw_name ) return Query ( query_name , operation_type , query_body )","title":"parse_query_from_string()"},{"location":"reference/queries/","text":"\u00b6 Definition for main collection for queries. Queries \u00b6 Collection and executor for queries. available_queries: List [ Query ] property readonly \u00b6 Sorted list of queries available on this collection. Returns: Type Description List[Query] List of queries. is_async: bool property readonly \u00b6 Will be query handlers generated for async execution. Returns: Type Description bool Will be query handlers generated for async execution. __getattr__ ( self , query_name ) special \u00b6 Get executor for query by name. Parameters: Name Type Description Default query_name str name of query or group. required Returns: Type Description Union[Callable, 'Queries'] Executor for query. Source code in edgeql_queries/queries.py 125 126 127 128 129 130 131 132 133 134 def __getattr__ ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Get executor for query by name. Arguments: query_name: name of query or group. Returns: Executor for query. \"\"\" return self . get_executor ( query_name ) __init__ ( self , is_async = True ) special \u00b6 Initialize collection and executor for queries. Parameters: Name Type Description Default is_async bool use async driver for creating queries. True Source code in edgeql_queries/queries.py 61 62 63 64 65 66 67 68 69 70 def __init__ ( self , is_async : bool = True ) -> None : \"\"\"Initialize collection and executor for queries. Arguments: is_async: use async driver for creating queries. \"\"\" self . _query_handlers : Dict [ str , Union [ Callable , \"Queries\" ]] = {} self . _available_queries : Set [ Query ] = set () self . _available_queries_groups : Dict [ str , Queries ] = {} self . _is_async = is_async __repr__ ( self ) special \u00b6 Return special string representation of collection. Returns: Type Description str Raw string for queries collection. Source code in edgeql_queries/queries.py 136 137 138 139 140 141 142 143 144 def __repr__ ( self ) -> str : \"\"\"Return special string representation of collection. Returns: Raw string for queries collection. \"\"\" return \"Queries(queries: {0} , groups: {1} )\" . format ( self . available_queries , self . _available_queries_groups , ) add_query ( self , name , query_handler ) \u00b6 Add a single query to collection. Parameters: Name Type Description Default name str name of query or sub-queries to be added. required query_handler Union[Queries, Query] a single [query][edgeql_queries.models.Query] that will be transformed to executor or [collection of queries][edgeql_queries.queries.Queries] that will be registered as sub-queries. required Source code in edgeql_queries/queries.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def add_query ( self , name : str , query_handler : Union [ Queries , Query ]) -> None : \"\"\"Add a single query to collection. Arguments: name: name of query or sub-queries to be added. query_handler: a single [query][edgeql_queries.models.Query] that will be transformed to executor or [collection of queries][edgeql_queries.queries.Queries] that will be registered as sub-queries. \"\"\" handler_for_query : Union [ Callable , Queries ] if isinstance ( query_handler , Query ): self . _available_queries . add ( query_handler ) handler_for_query = _create_handler_from_query ( query_handler , self . _is_async , ) else : handler_for_query = query_handler self . _available_queries_groups [ name ] = handler_for_query self . _query_handlers [ name ] = handler_for_query get_executor ( self , query_name ) \u00b6 Return executor for query by name. Parameters: Name Type Description Default query_name str name of query for which executor should be returned. required Returns: Type Description Union[Callable, 'Queries'] Executor for query. Source code in edgeql_queries/queries.py 114 115 116 117 118 119 120 121 122 123 def get_executor ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Return executor for query by name. Arguments: query_name: name of query for which executor should be returned. Returns: Executor for query. \"\"\" return self . _query_handlers [ query_name ] load_from_list ( queries_collection , queries ) \u00b6 Add queries from list. Parameters: Name Type Description Default queries_collection Queries already registered queries. required queries List[Query] list of queries to be added. required Returns: Type Description Queries Collection of queries to which method was applied. Source code in edgeql_queries/queries.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def load_from_list ( queries_collection : Queries , queries : List [ Query ]) -> Queries : \"\"\"Add queries from list. Arguments: queries_collection: already registered queries. queries: list of queries to be added. Returns: Collection of queries to which method was applied. \"\"\" for query in queries : queries_collection . add_query ( query . name , query ) return queries_collection load_from_tree ( queries_collection , query_tree ) \u00b6 Add queries from tree. Parameters: Name Type Description Default queries_collection Queries already registered queries. required query_tree QueriesTree tree of queries that should be added. required Returns: Type Description Queries Collection of queries to which method was applied. Source code in edgeql_queries/queries.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def load_from_tree ( queries_collection : Queries , query_tree : QueriesTree ) -> Queries : \"\"\"Add queries from tree. Arguments: queries_collection: already registered queries. query_tree: tree of queries that should be added. Returns: Collection of queries to which method was applied. \"\"\" for group_name , queries in query_tree . items (): if isinstance ( queries , dict ): queries_collection . add_query ( group_name , load_from_tree ( Queries ( queries_collection . is_async ), queries ), ) else : queries_collection . add_query ( queries . name , queries ) return queries_collection","title":"Queries"},{"location":"reference/queries/#edgeql_queries.queries","text":"Definition for main collection for queries.","title":"edgeql_queries.queries"},{"location":"reference/queries/#edgeql_queries.queries.Queries","text":"Collection and executor for queries.","title":"Queries"},{"location":"reference/queries/#edgeql_queries.queries.Queries.available_queries","text":"Sorted list of queries available on this collection. Returns: Type Description List[Query] List of queries.","title":"available_queries"},{"location":"reference/queries/#edgeql_queries.queries.Queries.is_async","text":"Will be query handlers generated for async execution. Returns: Type Description bool Will be query handlers generated for async execution.","title":"is_async"},{"location":"reference/queries/#edgeql_queries.queries.Queries.__getattr__","text":"Get executor for query by name. Parameters: Name Type Description Default query_name str name of query or group. required Returns: Type Description Union[Callable, 'Queries'] Executor for query. Source code in edgeql_queries/queries.py 125 126 127 128 129 130 131 132 133 134 def __getattr__ ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Get executor for query by name. Arguments: query_name: name of query or group. Returns: Executor for query. \"\"\" return self . get_executor ( query_name )","title":"__getattr__()"},{"location":"reference/queries/#edgeql_queries.queries.Queries.__init__","text":"Initialize collection and executor for queries. Parameters: Name Type Description Default is_async bool use async driver for creating queries. True Source code in edgeql_queries/queries.py 61 62 63 64 65 66 67 68 69 70 def __init__ ( self , is_async : bool = True ) -> None : \"\"\"Initialize collection and executor for queries. Arguments: is_async: use async driver for creating queries. \"\"\" self . _query_handlers : Dict [ str , Union [ Callable , \"Queries\" ]] = {} self . _available_queries : Set [ Query ] = set () self . _available_queries_groups : Dict [ str , Queries ] = {} self . _is_async = is_async","title":"__init__()"},{"location":"reference/queries/#edgeql_queries.queries.Queries.__repr__","text":"Return special string representation of collection. Returns: Type Description str Raw string for queries collection. Source code in edgeql_queries/queries.py 136 137 138 139 140 141 142 143 144 def __repr__ ( self ) -> str : \"\"\"Return special string representation of collection. Returns: Raw string for queries collection. \"\"\" return \"Queries(queries: {0} , groups: {1} )\" . format ( self . available_queries , self . _available_queries_groups , )","title":"__repr__()"},{"location":"reference/queries/#edgeql_queries.queries.Queries.add_query","text":"Add a single query to collection. Parameters: Name Type Description Default name str name of query or sub-queries to be added. required query_handler Union[Queries, Query] a single [query][edgeql_queries.models.Query] that will be transformed to executor or [collection of queries][edgeql_queries.queries.Queries] that will be registered as sub-queries. required Source code in edgeql_queries/queries.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 def add_query ( self , name : str , query_handler : Union [ Queries , Query ]) -> None : \"\"\"Add a single query to collection. Arguments: name: name of query or sub-queries to be added. query_handler: a single [query][edgeql_queries.models.Query] that will be transformed to executor or [collection of queries][edgeql_queries.queries.Queries] that will be registered as sub-queries. \"\"\" handler_for_query : Union [ Callable , Queries ] if isinstance ( query_handler , Query ): self . _available_queries . add ( query_handler ) handler_for_query = _create_handler_from_query ( query_handler , self . _is_async , ) else : handler_for_query = query_handler self . _available_queries_groups [ name ] = handler_for_query self . _query_handlers [ name ] = handler_for_query","title":"add_query()"},{"location":"reference/queries/#edgeql_queries.queries.Queries.get_executor","text":"Return executor for query by name. Parameters: Name Type Description Default query_name str name of query for which executor should be returned. required Returns: Type Description Union[Callable, 'Queries'] Executor for query. Source code in edgeql_queries/queries.py 114 115 116 117 118 119 120 121 122 123 def get_executor ( self , query_name : str ) -> Union [ Callable , \"Queries\" ]: \"\"\"Return executor for query by name. Arguments: query_name: name of query for which executor should be returned. Returns: Executor for query. \"\"\" return self . _query_handlers [ query_name ]","title":"get_executor()"},{"location":"reference/queries/#edgeql_queries.queries.load_from_list","text":"Add queries from list. Parameters: Name Type Description Default queries_collection Queries already registered queries. required queries List[Query] list of queries to be added. required Returns: Type Description Queries Collection of queries to which method was applied. Source code in edgeql_queries/queries.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def load_from_list ( queries_collection : Queries , queries : List [ Query ]) -> Queries : \"\"\"Add queries from list. Arguments: queries_collection: already registered queries. queries: list of queries to be added. Returns: Collection of queries to which method was applied. \"\"\" for query in queries : queries_collection . add_query ( query . name , query ) return queries_collection","title":"load_from_list()"},{"location":"reference/queries/#edgeql_queries.queries.load_from_tree","text":"Add queries from tree. Parameters: Name Type Description Default queries_collection Queries already registered queries. required query_tree QueriesTree tree of queries that should be added. required Returns: Type Description Queries Collection of queries to which method was applied. Source code in edgeql_queries/queries.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def load_from_tree ( queries_collection : Queries , query_tree : QueriesTree ) -> Queries : \"\"\"Add queries from tree. Arguments: queries_collection: already registered queries. query_tree: tree of queries that should be added. Returns: Collection of queries to which method was applied. \"\"\" for group_name , queries in query_tree . items (): if isinstance ( queries , dict ): queries_collection . add_query ( group_name , load_from_tree ( Queries ( queries_collection . is_async ), queries ), ) else : queries_collection . add_query ( queries . name , queries ) return queries_collection","title":"load_from_tree()"},{"location":"reference/query_loaders/","text":"\u00b6 Definition of loader for queries from files and directories. load_query_data_from_dir_path ( dir_path ) \u00b6 Load queries from esdl file. Parameters: Name Type Description Default dir_path Path path to file with queriesto be parsed. required Returns: Type Description Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Exceptions: Type Description ValueError if dir_path is not directory. Source code in edgeql_queries/query_loaders.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def load_query_data_from_dir_path ( dir_path : Path ) -> QueriesTree : \"\"\"Load queries from esdl file. Arguments: dir_path: path to file with queriesto be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Raises: ValueError: if dir_path is not directory. \"\"\" if not dir_path . is_dir (): raise ValueError ( \"path {0} must be a directory\" . format ( dir_path )) return _load_query_data_tree ( dir_path , dir_path ) load_query_data_from_edgeql ( edgeql ) \u00b6 Load queries from string. Parameters: Name Type Description Default edgeql str edgeql string that contains queries to be parsed. required Returns: Type Description List[edgeql_queries.models.Query] List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Source code in edgeql_queries/query_loaders.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def load_query_data_from_edgeql ( edgeql : str ) -> List [ Query ]: \"\"\"Load queries from string. Arguments: edgeql: edgeql string that contains queries to be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. \"\"\" query_data = [] matches_iter = _iter_pairs ( QUERY_DEFINITION_PATTERN . finditer ( edgeql )) for ( start_match , end_match ) in matches_iter : if end_match is not None : end_position = end_match . start () else : end_position = len ( edgeql ) query_data . append ( parse_query_from_string ( start_match . groups ()[ 0 ], edgeql [ start_match . end () : end_position ], ), ) return query_data load_query_data_from_file ( file_path ) \u00b6 Load queries from esdl file. Parameters: Name Type Description Default file_path Path path to file with queries to be parsed. required Returns: Type Description List[edgeql_queries.models.Query] List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Exceptions: Type Description FileNotFoundError if failed to open file. # noqa: DAR402 Source code in edgeql_queries/query_loaders.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def load_query_data_from_file ( file_path : Path ) -> List [ Query ]: \"\"\"Load queries from esdl file. Arguments: file_path: path to file with queries to be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Raises: FileNotFoundError: if failed to open file. # noqa: DAR402 \"\"\" with open ( file_path ) as edgeql_file : return load_query_data_from_edgeql ( edgeql_file . read ())","title":"Query Loaders"},{"location":"reference/query_loaders/#edgeql_queries.query_loaders","text":"Definition of loader for queries from files and directories.","title":"edgeql_queries.query_loaders"},{"location":"reference/query_loaders/#edgeql_queries.query_loaders.load_query_data_from_dir_path","text":"Load queries from esdl file. Parameters: Name Type Description Default dir_path Path path to file with queriesto be parsed. required Returns: Type Description Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Exceptions: Type Description ValueError if dir_path is not directory. Source code in edgeql_queries/query_loaders.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def load_query_data_from_dir_path ( dir_path : Path ) -> QueriesTree : \"\"\"Load queries from esdl file. Arguments: dir_path: path to file with queriesto be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Raises: ValueError: if dir_path is not directory. \"\"\" if not dir_path . is_dir (): raise ValueError ( \"path {0} must be a directory\" . format ( dir_path )) return _load_query_data_tree ( dir_path , dir_path )","title":"load_query_data_from_dir_path()"},{"location":"reference/query_loaders/#edgeql_queries.query_loaders.load_query_data_from_edgeql","text":"Load queries from string. Parameters: Name Type Description Default edgeql str edgeql string that contains queries to be parsed. required Returns: Type Description List[edgeql_queries.models.Query] List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Source code in edgeql_queries/query_loaders.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def load_query_data_from_edgeql ( edgeql : str ) -> List [ Query ]: \"\"\"Load queries from string. Arguments: edgeql: edgeql string that contains queries to be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. \"\"\" query_data = [] matches_iter = _iter_pairs ( QUERY_DEFINITION_PATTERN . finditer ( edgeql )) for ( start_match , end_match ) in matches_iter : if end_match is not None : end_position = end_match . start () else : end_position = len ( edgeql ) query_data . append ( parse_query_from_string ( start_match . groups ()[ 0 ], edgeql [ start_match . end () : end_position ], ), ) return query_data","title":"load_query_data_from_edgeql()"},{"location":"reference/query_loaders/#edgeql_queries.query_loaders.load_query_data_from_file","text":"Load queries from esdl file. Parameters: Name Type Description Default file_path Path path to file with queries to be parsed. required Returns: Type Description List[edgeql_queries.models.Query] List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Exceptions: Type Description FileNotFoundError if failed to open file. # noqa: DAR402 Source code in edgeql_queries/query_loaders.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def load_query_data_from_file ( file_path : Path ) -> List [ Query ]: \"\"\"Load queries from esdl file. Arguments: file_path: path to file with queries to be parsed. Returns: List of [queries][edgeql_queries.models.Query] that will be used later by [container][edgeql_queries.queries.Queries] for them. Raises: FileNotFoundError: if failed to open file. # noqa: DAR402 \"\"\" with open ( file_path ) as edgeql_file : return load_query_data_from_edgeql ( edgeql_file . read ())","title":"load_query_data_from_file()"},{"location":"reference/contib/aiosql/adapters/","text":"\u00b6 Definition for aiosql compatible adapters. Adapters here aren't \"real\" adapters, that can execute queries but just dummy classes with compatible interface. EdgeQLAsyncAdapter \u00b6 Dummy adapter for async driver. EdgeQLSyncAdapter \u00b6 Dummy adapter for sync driver.","title":"Adapters"},{"location":"reference/contib/aiosql/adapters/#edgeql_queries.contrib.aiosql.adapters","text":"Definition for aiosql compatible adapters. Adapters here aren't \"real\" adapters, that can execute queries but just dummy classes with compatible interface.","title":"edgeql_queries.contrib.aiosql.adapters"},{"location":"reference/contib/aiosql/adapters/#edgeql_queries.contrib.aiosql.adapters.EdgeQLAsyncAdapter","text":"Dummy adapter for async driver.","title":"EdgeQLAsyncAdapter"},{"location":"reference/contib/aiosql/adapters/#edgeql_queries.contrib.aiosql.adapters.EdgeQLSyncAdapter","text":"Dummy adapter for sync driver.","title":"EdgeQLSyncAdapter"},{"location":"reference/contib/aiosql/queries/","text":"\u00b6 Definition for aiosql compatible queries. EdgeQLQueries \u00b6 Queries that are compatible with aiosql. __init__ ( self , adapter ) special \u00b6 Init queries. Parameters: Name Type Description Default adapter Union[edgeql_queries.contrib.aiosql.adapters.EdgeQLSyncAdapter, edgeql_queries.contrib.aiosql.adapters.EdgeQLAsyncAdapter] adapter for aiosql with is_aio_driver field. required Source code in edgeql_queries/contrib/aiosql/queries.py 14 15 16 17 18 19 20 def __init__ ( self , adapter : Union [ EdgeQLSyncAdapter , EdgeQLAsyncAdapter ]) -> None : \"\"\"Init queries. Arguments: adapter: adapter for aiosql with `is_aio_driver` field. \"\"\" self . _use_async = adapter . is_aio_driver load_from_list ( self , queries ) \u00b6 Load list of queries. Parameters: Name Type Description Default queries List[edgeql_queries.models.Query] list of queries that should be used for creating executors for them. required Returns: Type Description Queries Built collection of queries with binded executors. Source code in edgeql_queries/contrib/aiosql/queries.py 22 23 24 25 26 27 28 29 30 31 32 def load_from_list ( self , queries : List [ Query ]) -> eq_queries . Queries : \"\"\"Load list of queries. Arguments: queries: list of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_list ( eq_queries . Queries ( self . _use_async ), queries ) load_from_tree ( self , queries_tree ) \u00b6 Load queries tree. Parameters: Name Type Description Default queries_tree Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] tree of queries that should be used for creating executors for them. required Returns: Type Description Queries Built collection of queries with binded executors. Source code in edgeql_queries/contrib/aiosql/queries.py 34 35 36 37 38 39 40 41 42 43 44 45 46 def load_from_tree ( self , queries_tree : QueriesTree ) -> eq_queries . Queries : \"\"\"Load queries tree. Arguments: queries_tree: tree of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_tree ( eq_queries . Queries ( self . _use_async ), queries_tree , )","title":"Queries"},{"location":"reference/contib/aiosql/queries/#edgeql_queries.contrib.aiosql.queries","text":"Definition for aiosql compatible queries.","title":"edgeql_queries.contrib.aiosql.queries"},{"location":"reference/contib/aiosql/queries/#edgeql_queries.contrib.aiosql.queries.EdgeQLQueries","text":"Queries that are compatible with aiosql.","title":"EdgeQLQueries"},{"location":"reference/contib/aiosql/queries/#edgeql_queries.contrib.aiosql.queries.EdgeQLQueries.__init__","text":"Init queries. Parameters: Name Type Description Default adapter Union[edgeql_queries.contrib.aiosql.adapters.EdgeQLSyncAdapter, edgeql_queries.contrib.aiosql.adapters.EdgeQLAsyncAdapter] adapter for aiosql with is_aio_driver field. required Source code in edgeql_queries/contrib/aiosql/queries.py 14 15 16 17 18 19 20 def __init__ ( self , adapter : Union [ EdgeQLSyncAdapter , EdgeQLAsyncAdapter ]) -> None : \"\"\"Init queries. Arguments: adapter: adapter for aiosql with `is_aio_driver` field. \"\"\" self . _use_async = adapter . is_aio_driver","title":"__init__()"},{"location":"reference/contib/aiosql/queries/#edgeql_queries.contrib.aiosql.queries.EdgeQLQueries.load_from_list","text":"Load list of queries. Parameters: Name Type Description Default queries List[edgeql_queries.models.Query] list of queries that should be used for creating executors for them. required Returns: Type Description Queries Built collection of queries with binded executors. Source code in edgeql_queries/contrib/aiosql/queries.py 22 23 24 25 26 27 28 29 30 31 32 def load_from_list ( self , queries : List [ Query ]) -> eq_queries . Queries : \"\"\"Load list of queries. Arguments: queries: list of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_list ( eq_queries . Queries ( self . _use_async ), queries )","title":"load_from_list()"},{"location":"reference/contib/aiosql/queries/#edgeql_queries.contrib.aiosql.queries.EdgeQLQueries.load_from_tree","text":"Load queries tree. Parameters: Name Type Description Default queries_tree Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] tree of queries that should be used for creating executors for them. required Returns: Type Description Queries Built collection of queries with binded executors. Source code in edgeql_queries/contrib/aiosql/queries.py 34 35 36 37 38 39 40 41 42 43 44 45 46 def load_from_tree ( self , queries_tree : QueriesTree ) -> eq_queries . Queries : \"\"\"Load queries tree. Arguments: queries_tree: tree of queries that should be used for creating executors for them. Returns: Built collection of queries with binded executors. \"\"\" return eq_queries . load_from_tree ( eq_queries . Queries ( self . _use_async ), queries_tree , )","title":"load_from_tree()"},{"location":"reference/contib/aiosql/query_loaders/","text":"\u00b6 Definition for aiosql compatible query loader. EdgeQLQueryLoader \u00b6 Query loader that is compatible with aiosql. __init__ ( self , * args ) special \u00b6 Do nothing but be compatible with aiosql query loader. Parameters: Name Type Description Default args Any any args that will be used for initializaton by aiosql. () Source code in edgeql_queries/contrib/aiosql/query_loaders.py 14 15 16 17 18 19 def __init__ ( self , * args : Any ) -> None : \"\"\"Do nothing but be compatible with aiosql query loader. Arguments: args: any args that will be used for initializaton by aiosql. \"\"\" load_query_data_from_dir_path ( self , dir_path ) \u00b6 Load queries from directory. Parameters: Name Type Description Default dir_path Path path to dir with EdgeQL files to create a new collection of queries. required Returns: Type Description Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py 44 45 46 47 48 49 50 51 52 53 54 def load_query_data_from_dir_path ( self , dir_path : Path ) -> QueriesTree : \"\"\"Load queries from directory. Arguments: dir_path: path to dir with EdgeQL files to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_dir_path ( dir_path ) load_query_data_from_file ( self , file_path ) \u00b6 Load queries from single file. Parameters: Name Type Description Default file_path Path path to EdgeQL file to create a new collection of queries. required Returns: Type Description List[edgeql_queries.models.Query] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py 32 33 34 35 36 37 38 39 40 41 42 def load_query_data_from_file ( self , file_path : Path ) -> List [ Query ]: \"\"\"Load queries from single file. Arguments: file_path: path to EdgeQL file to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_file ( file_path ) load_query_data_from_sql ( self , edgeql ) \u00b6 Load queries from EdgeQL string. Parameters: Name Type Description Default edgeql str EdgeQL string to create a new collection of queries. required Returns: Type Description List[edgeql_queries.models.Query] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py 21 22 23 24 25 26 27 28 29 30 def load_query_data_from_sql ( self , edgeql : str ) -> List [ Query ]: \"\"\"Load queries from EdgeQL string. Arguments: edgeql: EdgeQL string to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_edgeql ( edgeql )","title":"Query loaders"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders","text":"Definition for aiosql compatible query loader.","title":"edgeql_queries.contrib.aiosql.query_loaders"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders.EdgeQLQueryLoader","text":"Query loader that is compatible with aiosql.","title":"EdgeQLQueryLoader"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders.EdgeQLQueryLoader.__init__","text":"Do nothing but be compatible with aiosql query loader. Parameters: Name Type Description Default args Any any args that will be used for initializaton by aiosql. () Source code in edgeql_queries/contrib/aiosql/query_loaders.py 14 15 16 17 18 19 def __init__ ( self , * args : Any ) -> None : \"\"\"Do nothing but be compatible with aiosql query loader. Arguments: args: any args that will be used for initializaton by aiosql. \"\"\"","title":"__init__()"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders.EdgeQLQueryLoader.load_query_data_from_dir_path","text":"Load queries from directory. Parameters: Name Type Description Default dir_path Path path to dir with EdgeQL files to create a new collection of queries. required Returns: Type Description Dict[str, Union[edgeql_queries.models.Query, QueriesTree]] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py 44 45 46 47 48 49 50 51 52 53 54 def load_query_data_from_dir_path ( self , dir_path : Path ) -> QueriesTree : \"\"\"Load queries from directory. Arguments: dir_path: path to dir with EdgeQL files to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_dir_path ( dir_path )","title":"load_query_data_from_dir_path()"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders.EdgeQLQueryLoader.load_query_data_from_file","text":"Load queries from single file. Parameters: Name Type Description Default file_path Path path to EdgeQL file to create a new collection of queries. required Returns: Type Description List[edgeql_queries.models.Query] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py 32 33 34 35 36 37 38 39 40 41 42 def load_query_data_from_file ( self , file_path : Path ) -> List [ Query ]: \"\"\"Load queries from single file. Arguments: file_path: path to EdgeQL file to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_file ( file_path )","title":"load_query_data_from_file()"},{"location":"reference/contib/aiosql/query_loaders/#edgeql_queries.contrib.aiosql.query_loaders.EdgeQLQueryLoader.load_query_data_from_sql","text":"Load queries from EdgeQL string. Parameters: Name Type Description Default edgeql str EdgeQL string to create a new collection of queries. required Returns: Type Description List[edgeql_queries.models.Query] Parsed queries. Source code in edgeql_queries/contrib/aiosql/query_loaders.py 21 22 23 24 25 26 27 28 29 30 def load_query_data_from_sql ( self , edgeql : str ) -> List [ Query ]: \"\"\"Load queries from EdgeQL string. Arguments: edgeql: EdgeQL string to create a new collection of queries. Returns: Parsed queries. \"\"\" return query_loaders . load_query_data_from_edgeql ( edgeql )","title":"load_query_data_from_sql()"}]}